// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {

    /**
     * @notice Bn256 P value
     * @dev In order to prevent the verifier from accepting two version of the same pubInput, n and the quantity (n + P),  where n + P <= 2^256, we require that all pubInputs are stricly less than P.
     * @dev The reason for this is that the assmebly code of the verifier performs all arithmetic operations modulo P and as a consequence can't distinguish between n and n + P values.
     */

    uint256 constant SIZE_LIMIT = 21888242871839275222246405745257275088696311157297823662689037894645226208583; 

    function verify(
        uint256[65] calldata pubInputs,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[1232] memory transcript;
        for (uint i = 0; i < pubInputs.length; i++) {
            require(pubInputs[i] < SIZE_LIMIT);
        }
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0xc0, mod(calldataload(0x64), f_q))mstore(0xe0, mod(calldataload(0x84), f_q))mstore(0x100, mod(calldataload(0xa4), f_q))mstore(0x120, mod(calldataload(0xc4), f_q))mstore(0x140, mod(calldataload(0xe4), f_q))mstore(0x160, mod(calldataload(0x104), f_q))mstore(0x180, mod(calldataload(0x124), f_q))mstore(0x1a0, mod(calldataload(0x144), f_q))mstore(0x1c0, mod(calldataload(0x164), f_q))mstore(0x1e0, mod(calldataload(0x184), f_q))mstore(0x200, mod(calldataload(0x1a4), f_q))mstore(0x80, 938337048247040967907199320956470111355537465130939797301108084530768572301)        {            let x := calldataload(0x1c4)            mstore(0x220, x)            let y := calldataload(0x1e4)            mstore(0x240, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x204)            mstore(0x260, x)            let y := calldataload(0x224)            mstore(0x280, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x244)            mstore(0x2a0, x)            let y := calldataload(0x264)            mstore(0x2c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x284)            mstore(0x2e0, x)            let y := calldataload(0x2a4)            mstore(0x300, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2c4)            mstore(0x320, x)            let y := calldataload(0x2e4)            mstore(0x340, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x304)            mstore(0x360, x)            let y := calldataload(0x324)            mstore(0x380, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x344)            mstore(0x3a0, x)            let y := calldataload(0x364)            mstore(0x3c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x384)            mstore(0x3e0, x)            let y := calldataload(0x3a4)            mstore(0x400, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3c4)            mstore(0x420, x)            let y := calldataload(0x3e4)            mstore(0x440, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x460, keccak256(0x80, 992)){            let hash := mload(0x460)            mstore(0x480, mod(hash, f_q))            mstore(0x4a0, hash)        }        {            let x := calldataload(0x404)            mstore(0x4c0, x)            let y := calldataload(0x424)            mstore(0x4e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x444)            mstore(0x500, x)            let y := calldataload(0x464)            mstore(0x520, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x540, keccak256(0x4a0, 160)){            let hash := mload(0x540)            mstore(0x560, mod(hash, f_q))            mstore(0x580, hash)        }mstore8(0x5a0, 1)mstore(0x5a0, keccak256(0x580, 33)){            let hash := mload(0x5a0)            mstore(0x5c0, mod(hash, f_q))            mstore(0x5e0, hash)        }        {            let x := calldataload(0x484)            mstore(0x600, x)            let y := calldataload(0x4a4)            mstore(0x620, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x4c4)            mstore(0x640, x)            let y := calldataload(0x4e4)            mstore(0x660, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x504)            mstore(0x680, x)            let y := calldataload(0x524)            mstore(0x6a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x544)            mstore(0x6c0, x)            let y := calldataload(0x564)            mstore(0x6e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x584)            mstore(0x700, x)            let y := calldataload(0x5a4)            mstore(0x720, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x5c4)            mstore(0x740, x)            let y := calldataload(0x5e4)            mstore(0x760, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x604)            mstore(0x780, x)            let y := calldataload(0x624)            mstore(0x7a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x644)            mstore(0x7c0, x)            let y := calldataload(0x664)            mstore(0x7e0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x800, keccak256(0x5e0, 544)){            let hash := mload(0x800)            mstore(0x820, mod(hash, f_q))            mstore(0x840, hash)        }        {            let x := calldataload(0x684)            mstore(0x860, x)            let y := calldataload(0x6a4)            mstore(0x880, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x6c4)            mstore(0x8a0, x)            let y := calldataload(0x6e4)            mstore(0x8c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x704)            mstore(0x8e0, x)            let y := calldataload(0x724)            mstore(0x900, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x920, keccak256(0x840, 224)){            let hash := mload(0x920)            mstore(0x940, mod(hash, f_q))            mstore(0x960, hash)        }mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, mod(calldataload(0x764), f_q))mstore(0x9c0, mod(calldataload(0x784), f_q))mstore(0x9e0, mod(calldataload(0x7a4), f_q))mstore(0xa00, mod(calldataload(0x7c4), f_q))mstore(0xa20, mod(calldataload(0x7e4), f_q))mstore(0xa40, mod(calldataload(0x804), f_q))mstore(0xa60, mod(calldataload(0x824), f_q))mstore(0xa80, mod(calldataload(0x844), f_q))mstore(0xaa0, mod(calldataload(0x864), f_q))mstore(0xac0, mod(calldataload(0x884), f_q))mstore(0xae0, mod(calldataload(0x8a4), f_q))mstore(0xb00, mod(calldataload(0x8c4), f_q))mstore(0xb20, mod(calldataload(0x8e4), f_q))mstore(0xb40, mod(calldataload(0x904), f_q))mstore(0xb60, mod(calldataload(0x924), f_q))mstore(0xb80, mod(calldataload(0x944), f_q))mstore(0xba0, mod(calldataload(0x964), f_q))mstore(0xbc0, mod(calldataload(0x984), f_q))mstore(0xbe0, mod(calldataload(0x9a4), f_q))mstore(0xc00, mod(calldataload(0x9c4), f_q))mstore(0xc20, mod(calldataload(0x9e4), f_q))mstore(0xc40, mod(calldataload(0xa04), f_q))mstore(0xc60, mod(calldataload(0xa24), f_q))mstore(0xc80, mod(calldataload(0xa44), f_q))mstore(0xca0, mod(calldataload(0xa64), f_q))mstore(0xcc0, mod(calldataload(0xa84), f_q))mstore(0xce0, mod(calldataload(0xaa4), f_q))mstore(0xd00, mod(calldataload(0xac4), f_q))mstore(0xd20, mod(calldataload(0xae4), f_q))mstore(0xd40, mod(calldataload(0xb04), f_q))mstore(0xd60, mod(calldataload(0xb24), f_q))mstore(0xd80, mod(calldataload(0xb44), f_q))mstore(0xda0, mod(calldataload(0xb64), f_q))mstore(0xdc0, mod(calldataload(0xb84), f_q))mstore(0xde0, mod(calldataload(0xba4), f_q))mstore(0xe00, mod(calldataload(0xbc4), f_q))mstore(0xe20, mod(calldataload(0xbe4), f_q))mstore(0xe40, mod(calldataload(0xc04), f_q))mstore(0xe60, mod(calldataload(0xc24), f_q))mstore(0xe80, mod(calldataload(0xc44), f_q))mstore(0xea0, mod(calldataload(0xc64), f_q))mstore(0xec0, mod(calldataload(0xc84), f_q))mstore(0xee0, mod(calldataload(0xca4), f_q))mstore(0xf00, mod(calldataload(0xcc4), f_q))mstore(0xf20, mod(calldataload(0xce4), f_q))mstore(0xf40, mod(calldataload(0xd04), f_q))mstore(0xf60, mod(calldataload(0xd24), f_q))mstore(0xf80, mod(calldataload(0xd44), f_q))mstore(0xfa0, mod(calldataload(0xd64), f_q))mstore(0xfc0, mod(calldataload(0xd84), f_q))mstore(0xfe0, mod(calldataload(0xda4), f_q))mstore(0x1000, mod(calldataload(0xdc4), f_q))mstore(0x1020, mod(calldataload(0xde4), f_q))mstore(0x1040, mod(calldataload(0xe04), f_q))mstore(0x1060, mod(calldataload(0xe24), f_q))mstore(0x1080, mod(calldataload(0xe44), f_q))mstore(0x10a0, mod(calldataload(0xe64), f_q))mstore(0x10c0, mod(calldataload(0xe84), f_q))mstore(0x10e0, mod(calldataload(0xea4), f_q))mstore(0x1100, mod(calldataload(0xec4), f_q))mstore(0x1120, mod(calldataload(0xee4), f_q))mstore(0x1140, mod(calldataload(0xf04), f_q))mstore(0x1160, mod(calldataload(0xf24), f_q))mstore(0x1180, mod(calldataload(0xf44), f_q))mstore(0x11a0, mod(calldataload(0xf64), f_q))mstore(0x11c0, mod(calldataload(0xf84), f_q))mstore(0x11e0, mod(calldataload(0xfa4), f_q))mstore(0x1200, mod(calldataload(0xfc4), f_q))mstore(0x1220, mod(calldataload(0xfe4), f_q))mstore(0x1240, mod(calldataload(0x1004), f_q))mstore(0x1260, mod(calldataload(0x1024), f_q))mstore(0x1280, mod(calldataload(0x1044), f_q))mstore(0x12a0, mod(calldataload(0x1064), f_q))mstore(0x12c0, mod(calldataload(0x1084), f_q))mstore(0x12e0, mod(calldataload(0x10a4), f_q))mstore(0x1300, mod(calldataload(0x10c4), f_q))mstore(0x1320, keccak256(0x960, 2496)){            let hash := mload(0x1320)            mstore(0x1340, mod(hash, f_q))            mstore(0x1360, hash)        }mstore8(0x1380, 1)mstore(0x1380, keccak256(0x1360, 33)){            let hash := mload(0x1380)            mstore(0x13a0, mod(hash, f_q))            mstore(0x13c0, hash)        }        {            let x := calldataload(0x10e4)            mstore(0x13e0, x)            let y := calldataload(0x1104)            mstore(0x1400, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1420, keccak256(0x13c0, 96)){            let hash := mload(0x1420)            mstore(0x1440, mod(hash, f_q))            mstore(0x1460, hash)        }        {            let x := calldataload(0x1124)            mstore(0x1480, x)            let y := calldataload(0x1144)            mstore(0x14a0, y)            success := and(validate_ec_point(x, y), success)        }{            let x := mload(0xa0)x := add(x, shl(88, mload(0xc0)))x := add(x, shl(176, mload(0xe0)))mstore(0x14c0, x)let y := mload(0x100)y := add(y, shl(88, mload(0x120)))y := add(y, shl(176, mload(0x140)))mstore(0x14e0, y)            success := and(validate_ec_point(x, y), success)        }{            let x := mload(0x160)x := add(x, shl(88, mload(0x180)))x := add(x, shl(176, mload(0x1a0)))mstore(0x1500, x)let y := mload(0x1c0)y := add(y, shl(88, mload(0x1e0)))y := add(y, shl(176, mload(0x200)))mstore(0x1520, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1540, mulmod(mload(0x940), mload(0x940), f_q))mstore(0x1560, mulmod(mload(0x1540), mload(0x1540), f_q))mstore(0x1580, mulmod(mload(0x1560), mload(0x1560), f_q))mstore(0x15a0, mulmod(mload(0x1580), mload(0x1580), f_q))mstore(0x15c0, mulmod(mload(0x15a0), mload(0x15a0), f_q))mstore(0x15e0, mulmod(mload(0x15c0), mload(0x15c0), f_q))mstore(0x1600, mulmod(mload(0x15e0), mload(0x15e0), f_q))mstore(0x1620, mulmod(mload(0x1600), mload(0x1600), f_q))mstore(0x1640, mulmod(mload(0x1620), mload(0x1620), f_q))mstore(0x1660, mulmod(mload(0x1640), mload(0x1640), f_q))mstore(0x1680, mulmod(mload(0x1660), mload(0x1660), f_q))mstore(0x16a0, mulmod(mload(0x1680), mload(0x1680), f_q))mstore(0x16c0, mulmod(mload(0x16a0), mload(0x16a0), f_q))mstore(0x16e0, mulmod(mload(0x16c0), mload(0x16c0), f_q))mstore(0x1700, mulmod(mload(0x16e0), mload(0x16e0), f_q))mstore(0x1720, mulmod(mload(0x1700), mload(0x1700), f_q))mstore(0x1740, mulmod(mload(0x1720), mload(0x1720), f_q))mstore(0x1760, mulmod(mload(0x1740), mload(0x1740), f_q))mstore(0x1780, mulmod(mload(0x1760), mload(0x1760), f_q))mstore(0x17a0, mulmod(mload(0x1780), mload(0x1780), f_q))mstore(0x17c0, mulmod(mload(0x17a0), mload(0x17a0), f_q))mstore(0x17e0, mulmod(mload(0x17c0), mload(0x17c0), f_q))mstore(0x1800, addmod(mload(0x17e0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1820, mulmod(mload(0x1800), 21888237653275510688422624196183639687472264873923820041627027729598873448513, f_q))mstore(0x1840, mulmod(mload(0x1820), 13225785879531581993054172815365636627224369411478295502904397545373139154045, f_q))mstore(0x1860, addmod(mload(0x940), 8662456992307693229192232929891638461323994988937738840793806641202669341572, f_q))mstore(0x1880, mulmod(mload(0x1820), 10939663269433627367777756708678102241564365262857670666700619874077960926249, f_q))mstore(0x18a0, addmod(mload(0x940), 10948579602405647854468649036579172846983999137558363676997584312497847569368, f_q))mstore(0x18c0, mulmod(mload(0x1820), 11016257578652593686382655500910603527869149377564754001549454008164059876499, f_q))mstore(0x18e0, addmod(mload(0x940), 10871985293186681535863750244346671560679215022851280342148750178411748619118, f_q))mstore(0x1900, mulmod(mload(0x1820), 15402826414547299628414612080036060696555554914079673875872749760617770134879, f_q))mstore(0x1920, addmod(mload(0x940), 6485416457291975593831793665221214391992809486336360467825454425958038360738, f_q))mstore(0x1940, mulmod(mload(0x1820), 21710372849001950800533397158415938114909991150039389063546734567764856596059, f_q))mstore(0x1960, addmod(mload(0x940), 177870022837324421713008586841336973638373250376645280151469618810951899558, f_q))mstore(0x1980, mulmod(mload(0x1820), 2785514556381676080176937710880804108647911392478702105860685610379369825016, f_q))mstore(0x19a0, addmod(mload(0x940), 19102728315457599142069468034376470979900453007937332237837518576196438670601, f_q))mstore(0x19c0, mulmod(mload(0x1820), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))mstore(0x19e0, addmod(mload(0x940), 13154116519010929542673167886091370382741775939114889923107781597533678454429, f_q))mstore(0x1a00, mulmod(mload(0x1820), 1, f_q))mstore(0x1a20, addmod(mload(0x940), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1a40, mulmod(mload(0x1820), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))mstore(0x1a60, addmod(mload(0x940), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))mstore(0x1a80, mulmod(mload(0x1820), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))mstore(0x1aa0, addmod(mload(0x940), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))mstore(0x1ac0, mulmod(mload(0x1820), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))mstore(0x1ae0, addmod(mload(0x940), 9268625363986062636089532824584791139728887410636484032390921470890938228625, f_q))mstore(0x1b00, mulmod(mload(0x1820), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))mstore(0x1b20, addmod(mload(0x940), 2855281034601326619502779289517034852317245347382893578658160672914005347465, f_q))mstore(0x1b40, mulmod(mload(0x1820), 915149353520972163646494413843788069594022902357002628455555785223409501882, f_q))mstore(0x1b60, addmod(mload(0x940), 20973093518318303058599911331413487018954341498059031715242648401352398993735, f_q))mstore(0x1b80, mulmod(mload(0x1820), 3766081621734395783232337525162072736827576297943013392955872170138036189193, f_q))mstore(0x1ba0, addmod(mload(0x940), 18122161250104879439014068220095202351720788102473020950742332016437772306424, f_q))mstore(0x1bc0, mulmod(mload(0x1820), 4245441013247250116003069945606352967193023389718465410501109428393342802981, f_q))mstore(0x1be0, addmod(mload(0x940), 17642801858592025106243335799650922121355341010697568933197094758182465692636, f_q))mstore(0x1c00, mulmod(mload(0x1820), 5854133144571823792863860130267644613802765696134002830362054821530146160770, f_q))mstore(0x1c20, addmod(mload(0x940), 16034109727267451429382545614989630474745598704282031513336149365045662334847, f_q))mstore(0x1c40, mulmod(mload(0x1820), 5980488956150442207659150513163747165544364597008566989111579977672498964212, f_q))mstore(0x1c60, addmod(mload(0x940), 15907753915688833014587255232093527923003999803407467354586624208903309531405, f_q))mstore(0x1c80, mulmod(mload(0x1820), 14557038802599140430182096396825290815503940951075961210638273254419942783582, f_q))mstore(0x1ca0, addmod(mload(0x940), 7331204069240134792064309348431984273044423449340073133059930932155865712035, f_q))mstore(0x1cc0, mulmod(mload(0x1820), 13553911191894110065493137367144919847521088405945523452288398666974237857208, f_q))mstore(0x1ce0, addmod(mload(0x940), 8334331679945165156753268378112355241027275994470510891409805519601570638409, f_q)){            let prod := mload(0x1860)                prod := mulmod(mload(0x18a0), prod, f_q)                mstore(0x1d00, prod)                            prod := mulmod(mload(0x18e0), prod, f_q)                mstore(0x1d20, prod)                            prod := mulmod(mload(0x1920), prod, f_q)                mstore(0x1d40, prod)                            prod := mulmod(mload(0x1960), prod, f_q)                mstore(0x1d60, prod)                            prod := mulmod(mload(0x19a0), prod, f_q)                mstore(0x1d80, prod)                            prod := mulmod(mload(0x19e0), prod, f_q)                mstore(0x1da0, prod)                            prod := mulmod(mload(0x1a20), prod, f_q)                mstore(0x1dc0, prod)                            prod := mulmod(mload(0x1a60), prod, f_q)                mstore(0x1de0, prod)                            prod := mulmod(mload(0x1aa0), prod, f_q)                mstore(0x1e00, prod)                            prod := mulmod(mload(0x1ae0), prod, f_q)                mstore(0x1e20, prod)                            prod := mulmod(mload(0x1b20), prod, f_q)                mstore(0x1e40, prod)                            prod := mulmod(mload(0x1b60), prod, f_q)                mstore(0x1e60, prod)                            prod := mulmod(mload(0x1ba0), prod, f_q)                mstore(0x1e80, prod)                            prod := mulmod(mload(0x1be0), prod, f_q)                mstore(0x1ea0, prod)                            prod := mulmod(mload(0x1c20), prod, f_q)                mstore(0x1ec0, prod)                            prod := mulmod(mload(0x1c60), prod, f_q)                mstore(0x1ee0, prod)                            prod := mulmod(mload(0x1ca0), prod, f_q)                mstore(0x1f00, prod)                            prod := mulmod(mload(0x1ce0), prod, f_q)                mstore(0x1f20, prod)                            prod := mulmod(mload(0x1800), prod, f_q)                mstore(0x1f40, prod)                    }mstore(0x1f80, 32)mstore(0x1fa0, 32)mstore(0x1fc0, 32)mstore(0x1fe0, mload(0x1f40))mstore(0x2000, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x2020, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1f80, 0xc0, 0x1f60, 0x20), 1), success){                        let inv := mload(0x1f60)            let v                            v := mload(0x1800)                    mstore(0x1800, mulmod(mload(0x1f20), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1ce0)                    mstore(0x1ce0, mulmod(mload(0x1f00), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1ca0)                    mstore(0x1ca0, mulmod(mload(0x1ee0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1c60)                    mstore(0x1c60, mulmod(mload(0x1ec0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1c20)                    mstore(0x1c20, mulmod(mload(0x1ea0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1be0)                    mstore(0x1be0, mulmod(mload(0x1e80), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1ba0)                    mstore(0x1ba0, mulmod(mload(0x1e60), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1b60)                    mstore(0x1b60, mulmod(mload(0x1e40), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1b20)                    mstore(0x1b20, mulmod(mload(0x1e20), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1ae0)                    mstore(0x1ae0, mulmod(mload(0x1e00), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1aa0)                    mstore(0x1aa0, mulmod(mload(0x1de0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1a60)                    mstore(0x1a60, mulmod(mload(0x1dc0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1a20)                    mstore(0x1a20, mulmod(mload(0x1da0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x19e0)                    mstore(0x19e0, mulmod(mload(0x1d80), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x19a0)                    mstore(0x19a0, mulmod(mload(0x1d60), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1960)                    mstore(0x1960, mulmod(mload(0x1d40), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1920)                    mstore(0x1920, mulmod(mload(0x1d20), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x18e0)                    mstore(0x18e0, mulmod(mload(0x1d00), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x18a0)                    mstore(0x18a0, mulmod(mload(0x1860), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x1860, inv)        }mstore(0x2040, mulmod(mload(0x1840), mload(0x1860), f_q))mstore(0x2060, mulmod(mload(0x1880), mload(0x18a0), f_q))mstore(0x2080, mulmod(mload(0x18c0), mload(0x18e0), f_q))mstore(0x20a0, mulmod(mload(0x1900), mload(0x1920), f_q))mstore(0x20c0, mulmod(mload(0x1940), mload(0x1960), f_q))mstore(0x20e0, mulmod(mload(0x1980), mload(0x19a0), f_q))mstore(0x2100, mulmod(mload(0x19c0), mload(0x19e0), f_q))mstore(0x2120, mulmod(mload(0x1a00), mload(0x1a20), f_q))mstore(0x2140, mulmod(mload(0x1a40), mload(0x1a60), f_q))mstore(0x2160, mulmod(mload(0x1a80), mload(0x1aa0), f_q))mstore(0x2180, mulmod(mload(0x1ac0), mload(0x1ae0), f_q))mstore(0x21a0, mulmod(mload(0x1b00), mload(0x1b20), f_q))mstore(0x21c0, mulmod(mload(0x1b40), mload(0x1b60), f_q))mstore(0x21e0, mulmod(mload(0x1b80), mload(0x1ba0), f_q))mstore(0x2200, mulmod(mload(0x1bc0), mload(0x1be0), f_q))mstore(0x2220, mulmod(mload(0x1c00), mload(0x1c20), f_q))mstore(0x2240, mulmod(mload(0x1c40), mload(0x1c60), f_q))mstore(0x2260, mulmod(mload(0x1c80), mload(0x1ca0), f_q))mstore(0x2280, mulmod(mload(0x1cc0), mload(0x1ce0), f_q)){            let result := mulmod(mload(0x2120), mload(0xa0), f_q)result := addmod(mulmod(mload(0x2140), mload(0xc0), f_q), result, f_q)result := addmod(mulmod(mload(0x2160), mload(0xe0), f_q), result, f_q)result := addmod(mulmod(mload(0x2180), mload(0x100), f_q), result, f_q)result := addmod(mulmod(mload(0x21a0), mload(0x120), f_q), result, f_q)result := addmod(mulmod(mload(0x21c0), mload(0x140), f_q), result, f_q)result := addmod(mulmod(mload(0x21e0), mload(0x160), f_q), result, f_q)result := addmod(mulmod(mload(0x2200), mload(0x180), f_q), result, f_q)result := addmod(mulmod(mload(0x2220), mload(0x1a0), f_q), result, f_q)result := addmod(mulmod(mload(0x2240), mload(0x1c0), f_q), result, f_q)result := addmod(mulmod(mload(0x2260), mload(0x1e0), f_q), result, f_q)result := addmod(mulmod(mload(0x2280), mload(0x200), f_q), result, f_q)mstore(0x22a0, result)        }mstore(0x22c0, mulmod(mload(0x9c0), mload(0x9a0), f_q))mstore(0x22e0, addmod(mload(0x980), mload(0x22c0), f_q))mstore(0x2300, addmod(mload(0x22e0), sub(f_q, mload(0x9e0)), f_q))mstore(0x2320, mulmod(mload(0x2300), mload(0xde0), f_q))mstore(0x2340, mulmod(mload(0x820), mload(0x2320), f_q))mstore(0x2360, mulmod(mload(0xa40), mload(0xa20), f_q))mstore(0x2380, addmod(mload(0xa00), mload(0x2360), f_q))mstore(0x23a0, addmod(mload(0x2380), sub(f_q, mload(0xa60)), f_q))mstore(0x23c0, mulmod(mload(0x23a0), mload(0xe00), f_q))mstore(0x23e0, addmod(mload(0x2340), mload(0x23c0), f_q))mstore(0x2400, mulmod(mload(0x820), mload(0x23e0), f_q))mstore(0x2420, mulmod(mload(0xac0), mload(0xaa0), f_q))mstore(0x2440, addmod(mload(0xa80), mload(0x2420), f_q))mstore(0x2460, addmod(mload(0x2440), sub(f_q, mload(0xae0)), f_q))mstore(0x2480, mulmod(mload(0x2460), mload(0xe20), f_q))mstore(0x24a0, addmod(mload(0x2400), mload(0x2480), f_q))mstore(0x24c0, mulmod(mload(0x820), mload(0x24a0), f_q))mstore(0x24e0, mulmod(mload(0xb40), mload(0xb20), f_q))mstore(0x2500, addmod(mload(0xb00), mload(0x24e0), f_q))mstore(0x2520, addmod(mload(0x2500), sub(f_q, mload(0xb60)), f_q))mstore(0x2540, mulmod(mload(0x2520), mload(0xe40), f_q))mstore(0x2560, addmod(mload(0x24c0), mload(0x2540), f_q))mstore(0x2580, mulmod(mload(0x820), mload(0x2560), f_q))mstore(0x25a0, mulmod(mload(0xbc0), mload(0xba0), f_q))mstore(0x25c0, addmod(mload(0xb80), mload(0x25a0), f_q))mstore(0x25e0, addmod(mload(0x25c0), sub(f_q, mload(0xbe0)), f_q))mstore(0x2600, mulmod(mload(0x25e0), mload(0xe60), f_q))mstore(0x2620, addmod(mload(0x2580), mload(0x2600), f_q))mstore(0x2640, mulmod(mload(0x820), mload(0x2620), f_q))mstore(0x2660, mulmod(mload(0xc40), mload(0xc20), f_q))mstore(0x2680, addmod(mload(0xc00), mload(0x2660), f_q))mstore(0x26a0, addmod(mload(0x2680), sub(f_q, mload(0xc60)), f_q))mstore(0x26c0, mulmod(mload(0x26a0), mload(0xe80), f_q))mstore(0x26e0, addmod(mload(0x2640), mload(0x26c0), f_q))mstore(0x2700, mulmod(mload(0x820), mload(0x26e0), f_q))mstore(0x2720, mulmod(mload(0xcc0), mload(0xca0), f_q))mstore(0x2740, addmod(mload(0xc80), mload(0x2720), f_q))mstore(0x2760, addmod(mload(0x2740), sub(f_q, mload(0xce0)), f_q))mstore(0x2780, mulmod(mload(0x2760), mload(0xea0), f_q))mstore(0x27a0, addmod(mload(0x2700), mload(0x2780), f_q))mstore(0x27c0, mulmod(mload(0x820), mload(0x27a0), f_q))mstore(0x27e0, mulmod(mload(0xd40), mload(0xd20), f_q))mstore(0x2800, addmod(mload(0xd00), mload(0x27e0), f_q))mstore(0x2820, addmod(mload(0x2800), sub(f_q, mload(0xd60)), f_q))mstore(0x2840, mulmod(mload(0x2820), mload(0xec0), f_q))mstore(0x2860, addmod(mload(0x27c0), mload(0x2840), f_q))mstore(0x2880, mulmod(mload(0x820), mload(0x2860), f_q))mstore(0x28a0, addmod(1, sub(f_q, mload(0x1060)), f_q))mstore(0x28c0, mulmod(mload(0x28a0), mload(0x2120), f_q))mstore(0x28e0, addmod(mload(0x2880), mload(0x28c0), f_q))mstore(0x2900, mulmod(mload(0x820), mload(0x28e0), f_q))mstore(0x2920, mulmod(mload(0x1240), mload(0x1240), f_q))mstore(0x2940, addmod(mload(0x2920), sub(f_q, mload(0x1240)), f_q))mstore(0x2960, mulmod(mload(0x2940), mload(0x2040), f_q))mstore(0x2980, addmod(mload(0x2900), mload(0x2960), f_q))mstore(0x29a0, mulmod(mload(0x820), mload(0x2980), f_q))mstore(0x29c0, addmod(mload(0x10c0), sub(f_q, mload(0x10a0)), f_q))mstore(0x29e0, mulmod(mload(0x29c0), mload(0x2120), f_q))mstore(0x2a00, addmod(mload(0x29a0), mload(0x29e0), f_q))mstore(0x2a20, mulmod(mload(0x820), mload(0x2a00), f_q))mstore(0x2a40, addmod(mload(0x1120), sub(f_q, mload(0x1100)), f_q))mstore(0x2a60, mulmod(mload(0x2a40), mload(0x2120), f_q))mstore(0x2a80, addmod(mload(0x2a20), mload(0x2a60), f_q))mstore(0x2aa0, mulmod(mload(0x820), mload(0x2a80), f_q))mstore(0x2ac0, addmod(mload(0x1180), sub(f_q, mload(0x1160)), f_q))mstore(0x2ae0, mulmod(mload(0x2ac0), mload(0x2120), f_q))mstore(0x2b00, addmod(mload(0x2aa0), mload(0x2ae0), f_q))mstore(0x2b20, mulmod(mload(0x820), mload(0x2b00), f_q))mstore(0x2b40, addmod(mload(0x11e0), sub(f_q, mload(0x11c0)), f_q))mstore(0x2b60, mulmod(mload(0x2b40), mload(0x2120), f_q))mstore(0x2b80, addmod(mload(0x2b20), mload(0x2b60), f_q))mstore(0x2ba0, mulmod(mload(0x820), mload(0x2b80), f_q))mstore(0x2bc0, addmod(mload(0x1240), sub(f_q, mload(0x1220)), f_q))mstore(0x2be0, mulmod(mload(0x2bc0), mload(0x2120), f_q))mstore(0x2c00, addmod(mload(0x2ba0), mload(0x2be0), f_q))mstore(0x2c20, mulmod(mload(0x820), mload(0x2c00), f_q))mstore(0x2c40, addmod(1, sub(f_q, mload(0x2040)), f_q))mstore(0x2c60, addmod(mload(0x2060), mload(0x2080), f_q))mstore(0x2c80, addmod(mload(0x2c60), mload(0x20a0), f_q))mstore(0x2ca0, addmod(mload(0x2c80), mload(0x20c0), f_q))mstore(0x2cc0, addmod(mload(0x2ca0), mload(0x20e0), f_q))mstore(0x2ce0, addmod(mload(0x2cc0), mload(0x2100), f_q))mstore(0x2d00, addmod(mload(0x2c40), sub(f_q, mload(0x2ce0)), f_q))mstore(0x2d20, mulmod(mload(0xf00), mload(0x560), f_q))mstore(0x2d40, addmod(mload(0xda0), mload(0x2d20), f_q))mstore(0x2d60, addmod(mload(0x2d40), mload(0x5c0), f_q))mstore(0x2d80, mulmod(mload(0xf20), mload(0x560), f_q))mstore(0x2da0, addmod(mload(0x980), mload(0x2d80), f_q))mstore(0x2dc0, addmod(mload(0x2da0), mload(0x5c0), f_q))mstore(0x2de0, mulmod(mload(0x2dc0), mload(0x2d60), f_q))mstore(0x2e00, mulmod(mload(0x2de0), mload(0x1080), f_q))mstore(0x2e20, mulmod(1, mload(0x560), f_q))mstore(0x2e40, mulmod(mload(0x940), mload(0x2e20), f_q))mstore(0x2e60, addmod(mload(0xda0), mload(0x2e40), f_q))mstore(0x2e80, addmod(mload(0x2e60), mload(0x5c0), f_q))mstore(0x2ea0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x560), f_q))mstore(0x2ec0, mulmod(mload(0x940), mload(0x2ea0), f_q))mstore(0x2ee0, addmod(mload(0x980), mload(0x2ec0), f_q))mstore(0x2f00, addmod(mload(0x2ee0), mload(0x5c0), f_q))mstore(0x2f20, mulmod(mload(0x2f00), mload(0x2e80), f_q))mstore(0x2f40, mulmod(mload(0x2f20), mload(0x1060), f_q))mstore(0x2f60, addmod(mload(0x2e00), sub(f_q, mload(0x2f40)), f_q))mstore(0x2f80, mulmod(mload(0x2f60), mload(0x2d00), f_q))mstore(0x2fa0, addmod(mload(0x2c20), mload(0x2f80), f_q))mstore(0x2fc0, mulmod(mload(0x820), mload(0x2fa0), f_q))mstore(0x2fe0, mulmod(mload(0xf40), mload(0x560), f_q))mstore(0x3000, addmod(mload(0xa00), mload(0x2fe0), f_q))mstore(0x3020, addmod(mload(0x3000), mload(0x5c0), f_q))mstore(0x3040, mulmod(mload(0xf60), mload(0x560), f_q))mstore(0x3060, addmod(mload(0xa80), mload(0x3040), f_q))mstore(0x3080, addmod(mload(0x3060), mload(0x5c0), f_q))mstore(0x30a0, mulmod(mload(0x3080), mload(0x3020), f_q))mstore(0x30c0, mulmod(mload(0x30a0), mload(0x10e0), f_q))mstore(0x30e0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x560), f_q))mstore(0x3100, mulmod(mload(0x940), mload(0x30e0), f_q))mstore(0x3120, addmod(mload(0xa00), mload(0x3100), f_q))mstore(0x3140, addmod(mload(0x3120), mload(0x5c0), f_q))mstore(0x3160, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x560), f_q))mstore(0x3180, mulmod(mload(0x940), mload(0x3160), f_q))mstore(0x31a0, addmod(mload(0xa80), mload(0x3180), f_q))mstore(0x31c0, addmod(mload(0x31a0), mload(0x5c0), f_q))mstore(0x31e0, mulmod(mload(0x31c0), mload(0x3140), f_q))mstore(0x3200, mulmod(mload(0x31e0), mload(0x10c0), f_q))mstore(0x3220, addmod(mload(0x30c0), sub(f_q, mload(0x3200)), f_q))mstore(0x3240, mulmod(mload(0x3220), mload(0x2d00), f_q))mstore(0x3260, addmod(mload(0x2fc0), mload(0x3240), f_q))mstore(0x3280, mulmod(mload(0x820), mload(0x3260), f_q))mstore(0x32a0, mulmod(mload(0xf80), mload(0x560), f_q))mstore(0x32c0, addmod(mload(0xb00), mload(0x32a0), f_q))mstore(0x32e0, addmod(mload(0x32c0), mload(0x5c0), f_q))mstore(0x3300, mulmod(mload(0xfa0), mload(0x560), f_q))mstore(0x3320, addmod(mload(0xb80), mload(0x3300), f_q))mstore(0x3340, addmod(mload(0x3320), mload(0x5c0), f_q))mstore(0x3360, mulmod(mload(0x3340), mload(0x32e0), f_q))mstore(0x3380, mulmod(mload(0x3360), mload(0x1140), f_q))mstore(0x33a0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x560), f_q))mstore(0x33c0, mulmod(mload(0x940), mload(0x33a0), f_q))mstore(0x33e0, addmod(mload(0xb00), mload(0x33c0), f_q))mstore(0x3400, addmod(mload(0x33e0), mload(0x5c0), f_q))mstore(0x3420, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x560), f_q))mstore(0x3440, mulmod(mload(0x940), mload(0x3420), f_q))mstore(0x3460, addmod(mload(0xb80), mload(0x3440), f_q))mstore(0x3480, addmod(mload(0x3460), mload(0x5c0), f_q))mstore(0x34a0, mulmod(mload(0x3480), mload(0x3400), f_q))mstore(0x34c0, mulmod(mload(0x34a0), mload(0x1120), f_q))mstore(0x34e0, addmod(mload(0x3380), sub(f_q, mload(0x34c0)), f_q))mstore(0x3500, mulmod(mload(0x34e0), mload(0x2d00), f_q))mstore(0x3520, addmod(mload(0x3280), mload(0x3500), f_q))mstore(0x3540, mulmod(mload(0x820), mload(0x3520), f_q))mstore(0x3560, mulmod(mload(0xfc0), mload(0x560), f_q))mstore(0x3580, addmod(mload(0xc00), mload(0x3560), f_q))mstore(0x35a0, addmod(mload(0x3580), mload(0x5c0), f_q))mstore(0x35c0, mulmod(mload(0xfe0), mload(0x560), f_q))mstore(0x35e0, addmod(mload(0xc80), mload(0x35c0), f_q))mstore(0x3600, addmod(mload(0x35e0), mload(0x5c0), f_q))mstore(0x3620, mulmod(mload(0x3600), mload(0x35a0), f_q))mstore(0x3640, mulmod(mload(0x3620), mload(0x11a0), f_q))mstore(0x3660, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0x560), f_q))mstore(0x3680, mulmod(mload(0x940), mload(0x3660), f_q))mstore(0x36a0, addmod(mload(0xc00), mload(0x3680), f_q))mstore(0x36c0, addmod(mload(0x36a0), mload(0x5c0), f_q))mstore(0x36e0, mulmod(14704729814417906439424896605881467874595262020190401576785074330126828718155, mload(0x560), f_q))mstore(0x3700, mulmod(mload(0x940), mload(0x36e0), f_q))mstore(0x3720, addmod(mload(0xc80), mload(0x3700), f_q))mstore(0x3740, addmod(mload(0x3720), mload(0x5c0), f_q))mstore(0x3760, mulmod(mload(0x3740), mload(0x36c0), f_q))mstore(0x3780, mulmod(mload(0x3760), mload(0x1180), f_q))mstore(0x37a0, addmod(mload(0x3640), sub(f_q, mload(0x3780)), f_q))mstore(0x37c0, mulmod(mload(0x37a0), mload(0x2d00), f_q))mstore(0x37e0, addmod(mload(0x3540), mload(0x37c0), f_q))mstore(0x3800, mulmod(mload(0x820), mload(0x37e0), f_q))mstore(0x3820, mulmod(mload(0x1000), mload(0x560), f_q))mstore(0x3840, addmod(mload(0xd00), mload(0x3820), f_q))mstore(0x3860, addmod(mload(0x3840), mload(0x5c0), f_q))mstore(0x3880, mulmod(mload(0x1020), mload(0x560), f_q))mstore(0x38a0, addmod(mload(0xd80), mload(0x3880), f_q))mstore(0x38c0, addmod(mload(0x38a0), mload(0x5c0), f_q))mstore(0x38e0, mulmod(mload(0x38c0), mload(0x3860), f_q))mstore(0x3900, mulmod(mload(0x38e0), mload(0x1200), f_q))mstore(0x3920, mulmod(8343274462013750416000956870576256937330525306073862550863787263304548803879, mload(0x560), f_q))mstore(0x3940, mulmod(mload(0x940), mload(0x3920), f_q))mstore(0x3960, addmod(mload(0xd00), mload(0x3940), f_q))mstore(0x3980, addmod(mload(0x3960), mload(0x5c0), f_q))mstore(0x39a0, mulmod(20928372310071051017340352686640453451620397549739756658327314209761852842004, mload(0x560), f_q))mstore(0x39c0, mulmod(mload(0x940), mload(0x39a0), f_q))mstore(0x39e0, addmod(mload(0xd80), mload(0x39c0), f_q))mstore(0x3a00, addmod(mload(0x39e0), mload(0x5c0), f_q))mstore(0x3a20, mulmod(mload(0x3a00), mload(0x3980), f_q))mstore(0x3a40, mulmod(mload(0x3a20), mload(0x11e0), f_q))mstore(0x3a60, addmod(mload(0x3900), sub(f_q, mload(0x3a40)), f_q))mstore(0x3a80, mulmod(mload(0x3a60), mload(0x2d00), f_q))mstore(0x3aa0, addmod(mload(0x3800), mload(0x3a80), f_q))mstore(0x3ac0, mulmod(mload(0x820), mload(0x3aa0), f_q))mstore(0x3ae0, mulmod(mload(0x1040), mload(0x560), f_q))mstore(0x3b00, addmod(mload(0x22a0), mload(0x3ae0), f_q))mstore(0x3b20, addmod(mload(0x3b00), mload(0x5c0), f_q))mstore(0x3b40, mulmod(mload(0x3b20), mload(0x1260), f_q))mstore(0x3b60, mulmod(15845651941796975697993789271154426079663327509658641548785793587449119139335, mload(0x560), f_q))mstore(0x3b80, mulmod(mload(0x940), mload(0x3b60), f_q))mstore(0x3ba0, addmod(mload(0x22a0), mload(0x3b80), f_q))mstore(0x3bc0, addmod(mload(0x3ba0), mload(0x5c0), f_q))mstore(0x3be0, mulmod(mload(0x3bc0), mload(0x1240), f_q))mstore(0x3c00, addmod(mload(0x3b40), sub(f_q, mload(0x3be0)), f_q))mstore(0x3c20, mulmod(mload(0x3c00), mload(0x2d00), f_q))mstore(0x3c40, addmod(mload(0x3ac0), mload(0x3c20), f_q))mstore(0x3c60, mulmod(mload(0x820), mload(0x3c40), f_q))mstore(0x3c80, addmod(1, sub(f_q, mload(0x1280)), f_q))mstore(0x3ca0, mulmod(mload(0x3c80), mload(0x2120), f_q))mstore(0x3cc0, addmod(mload(0x3c60), mload(0x3ca0), f_q))mstore(0x3ce0, mulmod(mload(0x820), mload(0x3cc0), f_q))mstore(0x3d00, mulmod(mload(0x1280), mload(0x1280), f_q))mstore(0x3d20, addmod(mload(0x3d00), sub(f_q, mload(0x1280)), f_q))mstore(0x3d40, mulmod(mload(0x3d20), mload(0x2040), f_q))mstore(0x3d60, addmod(mload(0x3ce0), mload(0x3d40), f_q))mstore(0x3d80, mulmod(mload(0x820), mload(0x3d60), f_q))mstore(0x3da0, addmod(mload(0x12c0), mload(0x560), f_q))mstore(0x3dc0, mulmod(mload(0x3da0), mload(0x12a0), f_q))mstore(0x3de0, addmod(mload(0x1300), mload(0x5c0), f_q))mstore(0x3e00, mulmod(mload(0x3de0), mload(0x3dc0), f_q))mstore(0x3e20, addmod(mload(0xd80), mload(0x560), f_q))mstore(0x3e40, mulmod(mload(0x3e20), mload(0x1280), f_q))mstore(0x3e60, addmod(mload(0xdc0), mload(0x5c0), f_q))mstore(0x3e80, mulmod(mload(0x3e60), mload(0x3e40), f_q))mstore(0x3ea0, addmod(mload(0x3e00), sub(f_q, mload(0x3e80)), f_q))mstore(0x3ec0, mulmod(mload(0x3ea0), mload(0x2d00), f_q))mstore(0x3ee0, addmod(mload(0x3d80), mload(0x3ec0), f_q))mstore(0x3f00, mulmod(mload(0x820), mload(0x3ee0), f_q))mstore(0x3f20, addmod(mload(0x12c0), sub(f_q, mload(0x1300)), f_q))mstore(0x3f40, mulmod(mload(0x3f20), mload(0x2120), f_q))mstore(0x3f60, addmod(mload(0x3f00), mload(0x3f40), f_q))mstore(0x3f80, mulmod(mload(0x820), mload(0x3f60), f_q))mstore(0x3fa0, mulmod(mload(0x3f20), mload(0x2d00), f_q))mstore(0x3fc0, addmod(mload(0x12c0), sub(f_q, mload(0x12e0)), f_q))mstore(0x3fe0, mulmod(mload(0x3fc0), mload(0x3fa0), f_q))mstore(0x4000, addmod(mload(0x3f80), mload(0x3fe0), f_q))mstore(0x4020, mulmod(mload(0x17e0), mload(0x17e0), f_q))mstore(0x4040, mulmod(mload(0x4020), mload(0x17e0), f_q))mstore(0x4060, mulmod(1, mload(0x17e0), f_q))mstore(0x4080, mulmod(1, mload(0x4020), f_q))mstore(0x40a0, mulmod(mload(0x4000), mload(0x1800), f_q))mstore(0x40c0, mulmod(mload(0x1540), mload(0x940), f_q))mstore(0x40e0, mulmod(mload(0x40c0), mload(0x940), f_q))mstore(0x4100, mulmod(mload(0x940), 1, f_q))mstore(0x4120, addmod(mload(0x1440), sub(f_q, mload(0x4100)), f_q))mstore(0x4140, mulmod(mload(0x940), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))mstore(0x4160, addmod(mload(0x1440), sub(f_q, mload(0x4140)), f_q))mstore(0x4180, mulmod(mload(0x940), 8734126352828345679573237859165904705806588461301144420590422589042130041188, f_q))mstore(0x41a0, addmod(mload(0x1440), sub(f_q, mload(0x4180)), f_q))mstore(0x41c0, mulmod(mload(0x940), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))mstore(0x41e0, addmod(mload(0x1440), sub(f_q, mload(0x41c0)), f_q))mstore(0x4200, mulmod(mload(0x940), 12619617507853212586156872920672483948819476989779550311307282715684870266992, f_q))mstore(0x4220, addmod(mload(0x1440), sub(f_q, mload(0x4200)), f_q))mstore(0x4240, mulmod(mload(0x940), 13225785879531581993054172815365636627224369411478295502904397545373139154045, f_q))mstore(0x4260, addmod(mload(0x1440), sub(f_q, mload(0x4240)), f_q)){            let result := mulmod(mload(0x1440), mulmod(mload(0x40c0), 3544324119167359571073009690693121464267965232733679586767649244433889388945, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x40c0), 18343918752671915651173396054564153624280399167682354756930554942141919106672, f_q), f_q), result, f_q)mstore(0x4280, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x40c0), 3860370625838117017501327045244227871206764201116468958063324100051382735289, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x40c0), 21616901807277407275624036604424346159916096890712898844034238973395610537327, f_q), f_q), result, f_q)mstore(0x42a0, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x40c0), 21616901807277407275624036604424346159916096890712898844034238973395610537327, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x40c0), 889236556954614024749610889108815341999962898269585485843658889664869519176, f_q), f_q), result, f_q)mstore(0x42c0, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x40c0), 3209408481237076479025468386201293941554240476766691830436732310949352383503, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x40c0), 12080394110851700286656425387058292751221637853580771255128961096834426654570, f_q), f_q), result, f_q)mstore(0x42e0, result)        }mstore(0x4300, mulmod(1, mload(0x4120), f_q))mstore(0x4320, mulmod(mload(0x4300), mload(0x41e0), f_q))mstore(0x4340, mulmod(mload(0x4320), mload(0x4160), f_q))mstore(0x4360, mulmod(mload(0x4340), mload(0x4220), f_q)){            let result := mulmod(mload(0x1440), 1, f_q)result := addmod(mulmod(mload(0x940), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)mstore(0x4380, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x1540), 8390819244605639573390577733158868133682115698337564550620146375401109684432, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x1540), 13497423627233635648855828012098406954866248702078469793078057811174698811185, f_q), f_q), result, f_q)mstore(0x43a0, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x1540), 14389468897523033212448771694851898440525479866834419679925499462425232628530, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x1540), 10771624105926513343199793365135253961557027396599172824137553349410803667382, f_q), f_q), result, f_q)mstore(0x43c0, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x1540), 8021781111580269725587432039983408559403601261632071736490564397134126857583, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x1540), 13263758384809315129424392494083758423780924407584659157289746760747196496964, f_q), f_q), result, f_q)mstore(0x43e0, result)        }mstore(0x4400, mulmod(mload(0x4320), mload(0x4260), f_q)){            let result := mulmod(mload(0x1440), mulmod(mload(0x940), 10676941854703594198666993839846402519342119846958189386823924046696287912228, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x940), 11211301017135681023579411905410872569206244553457844956874280139879520583389, f_q), f_q), result, f_q)mstore(0x4420, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x940), 11211301017135681023579411905410872569206244553457844956874280139879520583389, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x940), 9784896584414196635074050157092911033682888682202239499976482395445754094883, f_q), f_q), result, f_q)mstore(0x4440, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x940), 13154116519010929542673167886091370382741775939114889923107781597533678454430, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x940), 8734126352828345679573237859165904705806588461301144420590422589042130041187, f_q), f_q), result, f_q)mstore(0x4460, result)        }{            let result := mulmod(mload(0x1440), mulmod(mload(0x940), 8734126352828345679573237859165904705806588461301144420590422589042130041187, f_q), f_q)result := addmod(mulmod(mload(0x940), mulmod(mload(0x940), 5948611796446669599396300148285100597158677068822442314729736978662760216172, f_q), f_q), result, f_q)mstore(0x4480, result)        }mstore(0x44a0, mulmod(mload(0x4300), mload(0x41a0), f_q)){            let prod := mload(0x4280)                prod := mulmod(mload(0x42a0), prod, f_q)                mstore(0x44c0, prod)                            prod := mulmod(mload(0x42c0), prod, f_q)                mstore(0x44e0, prod)                            prod := mulmod(mload(0x42e0), prod, f_q)                mstore(0x4500, prod)                            prod := mulmod(mload(0x4380), prod, f_q)                mstore(0x4520, prod)                            prod := mulmod(mload(0x4300), prod, f_q)                mstore(0x4540, prod)                            prod := mulmod(mload(0x43a0), prod, f_q)                mstore(0x4560, prod)                            prod := mulmod(mload(0x43c0), prod, f_q)                mstore(0x4580, prod)                            prod := mulmod(mload(0x43e0), prod, f_q)                mstore(0x45a0, prod)                            prod := mulmod(mload(0x4400), prod, f_q)                mstore(0x45c0, prod)                            prod := mulmod(mload(0x4420), prod, f_q)                mstore(0x45e0, prod)                            prod := mulmod(mload(0x4440), prod, f_q)                mstore(0x4600, prod)                            prod := mulmod(mload(0x4320), prod, f_q)                mstore(0x4620, prod)                            prod := mulmod(mload(0x4460), prod, f_q)                mstore(0x4640, prod)                            prod := mulmod(mload(0x4480), prod, f_q)                mstore(0x4660, prod)                            prod := mulmod(mload(0x44a0), prod, f_q)                mstore(0x4680, prod)                    }mstore(0x46c0, 32)mstore(0x46e0, 32)mstore(0x4700, 32)mstore(0x4720, mload(0x4680))mstore(0x4740, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x4760, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x46c0, 0xc0, 0x46a0, 0x20), 1), success){                        let inv := mload(0x46a0)            let v                            v := mload(0x44a0)                    mstore(0x44a0, mulmod(mload(0x4660), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4480)                    mstore(0x4480, mulmod(mload(0x4640), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4460)                    mstore(0x4460, mulmod(mload(0x4620), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4320)                    mstore(0x4320, mulmod(mload(0x4600), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4440)                    mstore(0x4440, mulmod(mload(0x45e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4420)                    mstore(0x4420, mulmod(mload(0x45c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4400)                    mstore(0x4400, mulmod(mload(0x45a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x43e0)                    mstore(0x43e0, mulmod(mload(0x4580), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x43c0)                    mstore(0x43c0, mulmod(mload(0x4560), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x43a0)                    mstore(0x43a0, mulmod(mload(0x4540), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4300)                    mstore(0x4300, mulmod(mload(0x4520), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4380)                    mstore(0x4380, mulmod(mload(0x4500), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x42e0)                    mstore(0x42e0, mulmod(mload(0x44e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x42c0)                    mstore(0x42c0, mulmod(mload(0x44c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x42a0)                    mstore(0x42a0, mulmod(mload(0x4280), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x4280, inv)        }{            let result := mload(0x4280)result := addmod(mload(0x42a0), result, f_q)result := addmod(mload(0x42c0), result, f_q)result := addmod(mload(0x42e0), result, f_q)mstore(0x4780, result)        }mstore(0x47a0, mulmod(mload(0x4360), mload(0x4300), f_q)){            let result := mload(0x4380)mstore(0x47c0, result)        }mstore(0x47e0, mulmod(mload(0x4360), mload(0x4400), f_q)){            let result := mload(0x43a0)result := addmod(mload(0x43c0), result, f_q)result := addmod(mload(0x43e0), result, f_q)mstore(0x4800, result)        }mstore(0x4820, mulmod(mload(0x4360), mload(0x4320), f_q)){            let result := mload(0x4420)result := addmod(mload(0x4440), result, f_q)mstore(0x4840, result)        }mstore(0x4860, mulmod(mload(0x4360), mload(0x44a0), f_q)){            let result := mload(0x4460)result := addmod(mload(0x4480), result, f_q)mstore(0x4880, result)        }{            let prod := mload(0x4780)                prod := mulmod(mload(0x47c0), prod, f_q)                mstore(0x48a0, prod)                            prod := mulmod(mload(0x4800), prod, f_q)                mstore(0x48c0, prod)                            prod := mulmod(mload(0x4840), prod, f_q)                mstore(0x48e0, prod)                            prod := mulmod(mload(0x4880), prod, f_q)                mstore(0x4900, prod)                    }mstore(0x4940, 32)mstore(0x4960, 32)mstore(0x4980, 32)mstore(0x49a0, mload(0x4900))mstore(0x49c0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x49e0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x4940, 0xc0, 0x4920, 0x20), 1), success){                        let inv := mload(0x4920)            let v                            v := mload(0x4880)                    mstore(0x4880, mulmod(mload(0x48e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4840)                    mstore(0x4840, mulmod(mload(0x48c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x4800)                    mstore(0x4800, mulmod(mload(0x48a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x47c0)                    mstore(0x47c0, mulmod(mload(0x4780), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x4780, inv)        }mstore(0x4a00, mulmod(mload(0x47a0), mload(0x47c0), f_q))mstore(0x4a20, mulmod(mload(0x47e0), mload(0x4800), f_q))mstore(0x4a40, mulmod(mload(0x4820), mload(0x4840), f_q))mstore(0x4a60, mulmod(mload(0x4860), mload(0x4880), f_q))mstore(0x4a80, mulmod(mload(0x1340), mload(0x1340), f_q))mstore(0x4aa0, mulmod(mload(0x4a80), mload(0x1340), f_q))mstore(0x4ac0, mulmod(mload(0x4aa0), mload(0x1340), f_q))mstore(0x4ae0, mulmod(mload(0x4ac0), mload(0x1340), f_q))mstore(0x4b00, mulmod(mload(0x4ae0), mload(0x1340), f_q))mstore(0x4b20, mulmod(mload(0x4b00), mload(0x1340), f_q))mstore(0x4b40, mulmod(mload(0x4b20), mload(0x1340), f_q))mstore(0x4b60, mulmod(mload(0x4b40), mload(0x1340), f_q))mstore(0x4b80, mulmod(mload(0x4b60), mload(0x1340), f_q))mstore(0x4ba0, mulmod(mload(0x4b80), mload(0x1340), f_q))mstore(0x4bc0, mulmod(mload(0x4ba0), mload(0x1340), f_q))mstore(0x4be0, mulmod(mload(0x4bc0), mload(0x1340), f_q))mstore(0x4c00, mulmod(mload(0x4be0), mload(0x1340), f_q))mstore(0x4c20, mulmod(mload(0x4c00), mload(0x1340), f_q))mstore(0x4c40, mulmod(mload(0x4c20), mload(0x1340), f_q))mstore(0x4c60, mulmod(mload(0x4c40), mload(0x1340), f_q))mstore(0x4c80, mulmod(mload(0x4c60), mload(0x1340), f_q))mstore(0x4ca0, mulmod(mload(0x4c80), mload(0x1340), f_q))mstore(0x4cc0, mulmod(mload(0x4ca0), mload(0x1340), f_q))mstore(0x4ce0, mulmod(mload(0x4cc0), mload(0x1340), f_q))mstore(0x4d00, mulmod(mload(0x4ce0), mload(0x1340), f_q))mstore(0x4d20, mulmod(mload(0x4d00), mload(0x1340), f_q))mstore(0x4d40, mulmod(mload(0x4d20), mload(0x1340), f_q))mstore(0x4d60, mulmod(mload(0x4d40), mload(0x1340), f_q))mstore(0x4d80, mulmod(mload(0x13a0), mload(0x13a0), f_q))mstore(0x4da0, mulmod(mload(0x4d80), mload(0x13a0), f_q))mstore(0x4dc0, mulmod(mload(0x4da0), mload(0x13a0), f_q))mstore(0x4de0, mulmod(mload(0x4dc0), mload(0x13a0), f_q)){            let result := mulmod(mload(0x980), mload(0x4280), f_q)result := addmod(mulmod(mload(0x9a0), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0x9c0), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0x9e0), mload(0x42e0), f_q), result, f_q)mstore(0x4e00, result)        }mstore(0x4e20, mulmod(mload(0x4e00), mload(0x4780), f_q))mstore(0x4e40, mulmod(sub(f_q, mload(0x4e20)), 1, f_q)){            let result := mulmod(mload(0xa00), mload(0x4280), f_q)result := addmod(mulmod(mload(0xa20), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xa40), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xa60), mload(0x42e0), f_q), result, f_q)mstore(0x4e60, result)        }mstore(0x4e80, mulmod(mload(0x4e60), mload(0x4780), f_q))mstore(0x4ea0, mulmod(sub(f_q, mload(0x4e80)), mload(0x1340), f_q))mstore(0x4ec0, mulmod(1, mload(0x1340), f_q))mstore(0x4ee0, addmod(mload(0x4e40), mload(0x4ea0), f_q)){            let result := mulmod(mload(0xa80), mload(0x4280), f_q)result := addmod(mulmod(mload(0xaa0), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xac0), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xae0), mload(0x42e0), f_q), result, f_q)mstore(0x4f00, result)        }mstore(0x4f20, mulmod(mload(0x4f00), mload(0x4780), f_q))mstore(0x4f40, mulmod(sub(f_q, mload(0x4f20)), mload(0x4a80), f_q))mstore(0x4f60, mulmod(1, mload(0x4a80), f_q))mstore(0x4f80, addmod(mload(0x4ee0), mload(0x4f40), f_q)){            let result := mulmod(mload(0xb00), mload(0x4280), f_q)result := addmod(mulmod(mload(0xb20), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xb40), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xb60), mload(0x42e0), f_q), result, f_q)mstore(0x4fa0, result)        }mstore(0x4fc0, mulmod(mload(0x4fa0), mload(0x4780), f_q))mstore(0x4fe0, mulmod(sub(f_q, mload(0x4fc0)), mload(0x4aa0), f_q))mstore(0x5000, mulmod(1, mload(0x4aa0), f_q))mstore(0x5020, addmod(mload(0x4f80), mload(0x4fe0), f_q)){            let result := mulmod(mload(0xb80), mload(0x4280), f_q)result := addmod(mulmod(mload(0xba0), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xbc0), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xbe0), mload(0x42e0), f_q), result, f_q)mstore(0x5040, result)        }mstore(0x5060, mulmod(mload(0x5040), mload(0x4780), f_q))mstore(0x5080, mulmod(sub(f_q, mload(0x5060)), mload(0x4ac0), f_q))mstore(0x50a0, mulmod(1, mload(0x4ac0), f_q))mstore(0x50c0, addmod(mload(0x5020), mload(0x5080), f_q)){            let result := mulmod(mload(0xc00), mload(0x4280), f_q)result := addmod(mulmod(mload(0xc20), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xc40), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xc60), mload(0x42e0), f_q), result, f_q)mstore(0x50e0, result)        }mstore(0x5100, mulmod(mload(0x50e0), mload(0x4780), f_q))mstore(0x5120, mulmod(sub(f_q, mload(0x5100)), mload(0x4ae0), f_q))mstore(0x5140, mulmod(1, mload(0x4ae0), f_q))mstore(0x5160, addmod(mload(0x50c0), mload(0x5120), f_q)){            let result := mulmod(mload(0xc80), mload(0x4280), f_q)result := addmod(mulmod(mload(0xca0), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xcc0), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xce0), mload(0x42e0), f_q), result, f_q)mstore(0x5180, result)        }mstore(0x51a0, mulmod(mload(0x5180), mload(0x4780), f_q))mstore(0x51c0, mulmod(sub(f_q, mload(0x51a0)), mload(0x4b00), f_q))mstore(0x51e0, mulmod(1, mload(0x4b00), f_q))mstore(0x5200, addmod(mload(0x5160), mload(0x51c0), f_q)){            let result := mulmod(mload(0xd00), mload(0x4280), f_q)result := addmod(mulmod(mload(0xd20), mload(0x42a0), f_q), result, f_q)result := addmod(mulmod(mload(0xd40), mload(0x42c0), f_q), result, f_q)result := addmod(mulmod(mload(0xd60), mload(0x42e0), f_q), result, f_q)mstore(0x5220, result)        }mstore(0x5240, mulmod(mload(0x5220), mload(0x4780), f_q))mstore(0x5260, mulmod(sub(f_q, mload(0x5240)), mload(0x4b20), f_q))mstore(0x5280, mulmod(1, mload(0x4b20), f_q))mstore(0x52a0, addmod(mload(0x5200), mload(0x5260), f_q))mstore(0x52c0, mulmod(mload(0x52a0), 1, f_q))mstore(0x52e0, mulmod(mload(0x4ec0), 1, f_q))mstore(0x5300, mulmod(mload(0x4f60), 1, f_q))mstore(0x5320, mulmod(mload(0x5000), 1, f_q))mstore(0x5340, mulmod(mload(0x50a0), 1, f_q))mstore(0x5360, mulmod(mload(0x5140), 1, f_q))mstore(0x5380, mulmod(mload(0x51e0), 1, f_q))mstore(0x53a0, mulmod(mload(0x5280), 1, f_q))mstore(0x53c0, mulmod(1, mload(0x47a0), f_q)){            let result := mulmod(mload(0xd80), mload(0x4380), f_q)mstore(0x53e0, result)        }mstore(0x5400, mulmod(mload(0x53e0), mload(0x4a00), f_q))mstore(0x5420, mulmod(sub(f_q, mload(0x5400)), 1, f_q))mstore(0x5440, mulmod(mload(0x53c0), 1, f_q)){            let result := mulmod(mload(0x1300), mload(0x4380), f_q)mstore(0x5460, result)        }mstore(0x5480, mulmod(mload(0x5460), mload(0x4a00), f_q))mstore(0x54a0, mulmod(sub(f_q, mload(0x5480)), mload(0x1340), f_q))mstore(0x54c0, mulmod(mload(0x53c0), mload(0x1340), f_q))mstore(0x54e0, addmod(mload(0x5420), mload(0x54a0), f_q)){            let result := mulmod(mload(0xda0), mload(0x4380), f_q)mstore(0x5500, result)        }mstore(0x5520, mulmod(mload(0x5500), mload(0x4a00), f_q))mstore(0x5540, mulmod(sub(f_q, mload(0x5520)), mload(0x4a80), f_q))mstore(0x5560, mulmod(mload(0x53c0), mload(0x4a80), f_q))mstore(0x5580, addmod(mload(0x54e0), mload(0x5540), f_q)){            let result := mulmod(mload(0xdc0), mload(0x4380), f_q)mstore(0x55a0, result)        }mstore(0x55c0, mulmod(mload(0x55a0), mload(0x4a00), f_q))mstore(0x55e0, mulmod(sub(f_q, mload(0x55c0)), mload(0x4aa0), f_q))mstore(0x5600, mulmod(mload(0x53c0), mload(0x4aa0), f_q))mstore(0x5620, addmod(mload(0x5580), mload(0x55e0), f_q)){            let result := mulmod(mload(0xde0), mload(0x4380), f_q)mstore(0x5640, result)        }mstore(0x5660, mulmod(mload(0x5640), mload(0x4a00), f_q))mstore(0x5680, mulmod(sub(f_q, mload(0x5660)), mload(0x4ac0), f_q))mstore(0x56a0, mulmod(mload(0x53c0), mload(0x4ac0), f_q))mstore(0x56c0, addmod(mload(0x5620), mload(0x5680), f_q)){            let result := mulmod(mload(0xe00), mload(0x4380), f_q)mstore(0x56e0, result)        }mstore(0x5700, mulmod(mload(0x56e0), mload(0x4a00), f_q))mstore(0x5720, mulmod(sub(f_q, mload(0x5700)), mload(0x4ae0), f_q))mstore(0x5740, mulmod(mload(0x53c0), mload(0x4ae0), f_q))mstore(0x5760, addmod(mload(0x56c0), mload(0x5720), f_q)){            let result := mulmod(mload(0xe20), mload(0x4380), f_q)mstore(0x5780, result)        }mstore(0x57a0, mulmod(mload(0x5780), mload(0x4a00), f_q))mstore(0x57c0, mulmod(sub(f_q, mload(0x57a0)), mload(0x4b00), f_q))mstore(0x57e0, mulmod(mload(0x53c0), mload(0x4b00), f_q))mstore(0x5800, addmod(mload(0x5760), mload(0x57c0), f_q)){            let result := mulmod(mload(0xe40), mload(0x4380), f_q)mstore(0x5820, result)        }mstore(0x5840, mulmod(mload(0x5820), mload(0x4a00), f_q))mstore(0x5860, mulmod(sub(f_q, mload(0x5840)), mload(0x4b20), f_q))mstore(0x5880, mulmod(mload(0x53c0), mload(0x4b20), f_q))mstore(0x58a0, addmod(mload(0x5800), mload(0x5860), f_q)){            let result := mulmod(mload(0xe60), mload(0x4380), f_q)mstore(0x58c0, result)        }mstore(0x58e0, mulmod(mload(0x58c0), mload(0x4a00), f_q))mstore(0x5900, mulmod(sub(f_q, mload(0x58e0)), mload(0x4b40), f_q))mstore(0x5920, mulmod(mload(0x53c0), mload(0x4b40), f_q))mstore(0x5940, addmod(mload(0x58a0), mload(0x5900), f_q)){            let result := mulmod(mload(0xe80), mload(0x4380), f_q)mstore(0x5960, result)        }mstore(0x5980, mulmod(mload(0x5960), mload(0x4a00), f_q))mstore(0x59a0, mulmod(sub(f_q, mload(0x5980)), mload(0x4b60), f_q))mstore(0x59c0, mulmod(mload(0x53c0), mload(0x4b60), f_q))mstore(0x59e0, addmod(mload(0x5940), mload(0x59a0), f_q)){            let result := mulmod(mload(0xea0), mload(0x4380), f_q)mstore(0x5a00, result)        }mstore(0x5a20, mulmod(mload(0x5a00), mload(0x4a00), f_q))mstore(0x5a40, mulmod(sub(f_q, mload(0x5a20)), mload(0x4b80), f_q))mstore(0x5a60, mulmod(mload(0x53c0), mload(0x4b80), f_q))mstore(0x5a80, addmod(mload(0x59e0), mload(0x5a40), f_q)){            let result := mulmod(mload(0xec0), mload(0x4380), f_q)mstore(0x5aa0, result)        }mstore(0x5ac0, mulmod(mload(0x5aa0), mload(0x4a00), f_q))mstore(0x5ae0, mulmod(sub(f_q, mload(0x5ac0)), mload(0x4ba0), f_q))mstore(0x5b00, mulmod(mload(0x53c0), mload(0x4ba0), f_q))mstore(0x5b20, addmod(mload(0x5a80), mload(0x5ae0), f_q)){            let result := mulmod(mload(0xf00), mload(0x4380), f_q)mstore(0x5b40, result)        }mstore(0x5b60, mulmod(mload(0x5b40), mload(0x4a00), f_q))mstore(0x5b80, mulmod(sub(f_q, mload(0x5b60)), mload(0x4bc0), f_q))mstore(0x5ba0, mulmod(mload(0x53c0), mload(0x4bc0), f_q))mstore(0x5bc0, addmod(mload(0x5b20), mload(0x5b80), f_q)){            let result := mulmod(mload(0xf20), mload(0x4380), f_q)mstore(0x5be0, result)        }mstore(0x5c00, mulmod(mload(0x5be0), mload(0x4a00), f_q))mstore(0x5c20, mulmod(sub(f_q, mload(0x5c00)), mload(0x4be0), f_q))mstore(0x5c40, mulmod(mload(0x53c0), mload(0x4be0), f_q))mstore(0x5c60, addmod(mload(0x5bc0), mload(0x5c20), f_q)){            let result := mulmod(mload(0xf40), mload(0x4380), f_q)mstore(0x5c80, result)        }mstore(0x5ca0, mulmod(mload(0x5c80), mload(0x4a00), f_q))mstore(0x5cc0, mulmod(sub(f_q, mload(0x5ca0)), mload(0x4c00), f_q))mstore(0x5ce0, mulmod(mload(0x53c0), mload(0x4c00), f_q))mstore(0x5d00, addmod(mload(0x5c60), mload(0x5cc0), f_q)){            let result := mulmod(mload(0xf60), mload(0x4380), f_q)mstore(0x5d20, result)        }mstore(0x5d40, mulmod(mload(0x5d20), mload(0x4a00), f_q))mstore(0x5d60, mulmod(sub(f_q, mload(0x5d40)), mload(0x4c20), f_q))mstore(0x5d80, mulmod(mload(0x53c0), mload(0x4c20), f_q))mstore(0x5da0, addmod(mload(0x5d00), mload(0x5d60), f_q)){            let result := mulmod(mload(0xf80), mload(0x4380), f_q)mstore(0x5dc0, result)        }mstore(0x5de0, mulmod(mload(0x5dc0), mload(0x4a00), f_q))mstore(0x5e00, mulmod(sub(f_q, mload(0x5de0)), mload(0x4c40), f_q))mstore(0x5e20, mulmod(mload(0x53c0), mload(0x4c40), f_q))mstore(0x5e40, addmod(mload(0x5da0), mload(0x5e00), f_q)){            let result := mulmod(mload(0xfa0), mload(0x4380), f_q)mstore(0x5e60, result)        }mstore(0x5e80, mulmod(mload(0x5e60), mload(0x4a00), f_q))mstore(0x5ea0, mulmod(sub(f_q, mload(0x5e80)), mload(0x4c60), f_q))mstore(0x5ec0, mulmod(mload(0x53c0), mload(0x4c60), f_q))mstore(0x5ee0, addmod(mload(0x5e40), mload(0x5ea0), f_q)){            let result := mulmod(mload(0xfc0), mload(0x4380), f_q)mstore(0x5f00, result)        }mstore(0x5f20, mulmod(mload(0x5f00), mload(0x4a00), f_q))mstore(0x5f40, mulmod(sub(f_q, mload(0x5f20)), mload(0x4c80), f_q))mstore(0x5f60, mulmod(mload(0x53c0), mload(0x4c80), f_q))mstore(0x5f80, addmod(mload(0x5ee0), mload(0x5f40), f_q)){            let result := mulmod(mload(0xfe0), mload(0x4380), f_q)mstore(0x5fa0, result)        }mstore(0x5fc0, mulmod(mload(0x5fa0), mload(0x4a00), f_q))mstore(0x5fe0, mulmod(sub(f_q, mload(0x5fc0)), mload(0x4ca0), f_q))mstore(0x6000, mulmod(mload(0x53c0), mload(0x4ca0), f_q))mstore(0x6020, addmod(mload(0x5f80), mload(0x5fe0), f_q)){            let result := mulmod(mload(0x1000), mload(0x4380), f_q)mstore(0x6040, result)        }mstore(0x6060, mulmod(mload(0x6040), mload(0x4a00), f_q))mstore(0x6080, mulmod(sub(f_q, mload(0x6060)), mload(0x4cc0), f_q))mstore(0x60a0, mulmod(mload(0x53c0), mload(0x4cc0), f_q))mstore(0x60c0, addmod(mload(0x6020), mload(0x6080), f_q)){            let result := mulmod(mload(0x1020), mload(0x4380), f_q)mstore(0x60e0, result)        }mstore(0x6100, mulmod(mload(0x60e0), mload(0x4a00), f_q))mstore(0x6120, mulmod(sub(f_q, mload(0x6100)), mload(0x4ce0), f_q))mstore(0x6140, mulmod(mload(0x53c0), mload(0x4ce0), f_q))mstore(0x6160, addmod(mload(0x60c0), mload(0x6120), f_q)){            let result := mulmod(mload(0x1040), mload(0x4380), f_q)mstore(0x6180, result)        }mstore(0x61a0, mulmod(mload(0x6180), mload(0x4a00), f_q))mstore(0x61c0, mulmod(sub(f_q, mload(0x61a0)), mload(0x4d00), f_q))mstore(0x61e0, mulmod(mload(0x53c0), mload(0x4d00), f_q))mstore(0x6200, addmod(mload(0x6160), mload(0x61c0), f_q))mstore(0x6220, mulmod(mload(0x4060), mload(0x47a0), f_q))mstore(0x6240, mulmod(mload(0x4080), mload(0x47a0), f_q)){            let result := mulmod(mload(0x40a0), mload(0x4380), f_q)mstore(0x6260, result)        }mstore(0x6280, mulmod(mload(0x6260), mload(0x4a00), f_q))mstore(0x62a0, mulmod(sub(f_q, mload(0x6280)), mload(0x4d20), f_q))mstore(0x62c0, mulmod(mload(0x53c0), mload(0x4d20), f_q))mstore(0x62e0, mulmod(mload(0x6220), mload(0x4d20), f_q))mstore(0x6300, mulmod(mload(0x6240), mload(0x4d20), f_q))mstore(0x6320, addmod(mload(0x6200), mload(0x62a0), f_q)){            let result := mulmod(mload(0xee0), mload(0x4380), f_q)mstore(0x6340, result)        }mstore(0x6360, mulmod(mload(0x6340), mload(0x4a00), f_q))mstore(0x6380, mulmod(sub(f_q, mload(0x6360)), mload(0x4d40), f_q))mstore(0x63a0, mulmod(mload(0x53c0), mload(0x4d40), f_q))mstore(0x63c0, addmod(mload(0x6320), mload(0x6380), f_q))mstore(0x63e0, mulmod(mload(0x63c0), mload(0x13a0), f_q))mstore(0x6400, mulmod(mload(0x5440), mload(0x13a0), f_q))mstore(0x6420, mulmod(mload(0x54c0), mload(0x13a0), f_q))mstore(0x6440, mulmod(mload(0x5560), mload(0x13a0), f_q))mstore(0x6460, mulmod(mload(0x5600), mload(0x13a0), f_q))mstore(0x6480, mulmod(mload(0x56a0), mload(0x13a0), f_q))mstore(0x64a0, mulmod(mload(0x5740), mload(0x13a0), f_q))mstore(0x64c0, mulmod(mload(0x57e0), mload(0x13a0), f_q))mstore(0x64e0, mulmod(mload(0x5880), mload(0x13a0), f_q))mstore(0x6500, mulmod(mload(0x5920), mload(0x13a0), f_q))mstore(0x6520, mulmod(mload(0x59c0), mload(0x13a0), f_q))mstore(0x6540, mulmod(mload(0x5a60), mload(0x13a0), f_q))mstore(0x6560, mulmod(mload(0x5b00), mload(0x13a0), f_q))mstore(0x6580, mulmod(mload(0x5ba0), mload(0x13a0), f_q))mstore(0x65a0, mulmod(mload(0x5c40), mload(0x13a0), f_q))mstore(0x65c0, mulmod(mload(0x5ce0), mload(0x13a0), f_q))mstore(0x65e0, mulmod(mload(0x5d80), mload(0x13a0), f_q))mstore(0x6600, mulmod(mload(0x5e20), mload(0x13a0), f_q))mstore(0x6620, mulmod(mload(0x5ec0), mload(0x13a0), f_q))mstore(0x6640, mulmod(mload(0x5f60), mload(0x13a0), f_q))mstore(0x6660, mulmod(mload(0x6000), mload(0x13a0), f_q))mstore(0x6680, mulmod(mload(0x60a0), mload(0x13a0), f_q))mstore(0x66a0, mulmod(mload(0x6140), mload(0x13a0), f_q))mstore(0x66c0, mulmod(mload(0x61e0), mload(0x13a0), f_q))mstore(0x66e0, mulmod(mload(0x62c0), mload(0x13a0), f_q))mstore(0x6700, mulmod(mload(0x62e0), mload(0x13a0), f_q))mstore(0x6720, mulmod(mload(0x6300), mload(0x13a0), f_q))mstore(0x6740, mulmod(mload(0x63a0), mload(0x13a0), f_q))mstore(0x6760, addmod(mload(0x52c0), mload(0x63e0), f_q))mstore(0x6780, mulmod(1, mload(0x47e0), f_q)){            let result := mulmod(mload(0x1060), mload(0x43a0), f_q)result := addmod(mulmod(mload(0x1080), mload(0x43c0), f_q), result, f_q)result := addmod(mulmod(mload(0x10a0), mload(0x43e0), f_q), result, f_q)mstore(0x67a0, result)        }mstore(0x67c0, mulmod(mload(0x67a0), mload(0x4a20), f_q))mstore(0x67e0, mulmod(sub(f_q, mload(0x67c0)), 1, f_q))mstore(0x6800, mulmod(mload(0x6780), 1, f_q)){            let result := mulmod(mload(0x10c0), mload(0x43a0), f_q)result := addmod(mulmod(mload(0x10e0), mload(0x43c0), f_q), result, f_q)result := addmod(mulmod(mload(0x1100), mload(0x43e0), f_q), result, f_q)mstore(0x6820, result)        }mstore(0x6840, mulmod(mload(0x6820), mload(0x4a20), f_q))mstore(0x6860, mulmod(sub(f_q, mload(0x6840)), mload(0x1340), f_q))mstore(0x6880, mulmod(mload(0x6780), mload(0x1340), f_q))mstore(0x68a0, addmod(mload(0x67e0), mload(0x6860), f_q)){            let result := mulmod(mload(0x1120), mload(0x43a0), f_q)result := addmod(mulmod(mload(0x1140), mload(0x43c0), f_q), result, f_q)result := addmod(mulmod(mload(0x1160), mload(0x43e0), f_q), result, f_q)mstore(0x68c0, result)        }mstore(0x68e0, mulmod(mload(0x68c0), mload(0x4a20), f_q))mstore(0x6900, mulmod(sub(f_q, mload(0x68e0)), mload(0x4a80), f_q))mstore(0x6920, mulmod(mload(0x6780), mload(0x4a80), f_q))mstore(0x6940, addmod(mload(0x68a0), mload(0x6900), f_q)){            let result := mulmod(mload(0x1180), mload(0x43a0), f_q)result := addmod(mulmod(mload(0x11a0), mload(0x43c0), f_q), result, f_q)result := addmod(mulmod(mload(0x11c0), mload(0x43e0), f_q), result, f_q)mstore(0x6960, result)        }mstore(0x6980, mulmod(mload(0x6960), mload(0x4a20), f_q))mstore(0x69a0, mulmod(sub(f_q, mload(0x6980)), mload(0x4aa0), f_q))mstore(0x69c0, mulmod(mload(0x6780), mload(0x4aa0), f_q))mstore(0x69e0, addmod(mload(0x6940), mload(0x69a0), f_q)){            let result := mulmod(mload(0x11e0), mload(0x43a0), f_q)result := addmod(mulmod(mload(0x1200), mload(0x43c0), f_q), result, f_q)result := addmod(mulmod(mload(0x1220), mload(0x43e0), f_q), result, f_q)mstore(0x6a00, result)        }mstore(0x6a20, mulmod(mload(0x6a00), mload(0x4a20), f_q))mstore(0x6a40, mulmod(sub(f_q, mload(0x6a20)), mload(0x4ac0), f_q))mstore(0x6a60, mulmod(mload(0x6780), mload(0x4ac0), f_q))mstore(0x6a80, addmod(mload(0x69e0), mload(0x6a40), f_q))mstore(0x6aa0, mulmod(mload(0x6a80), mload(0x4d80), f_q))mstore(0x6ac0, mulmod(mload(0x6800), mload(0x4d80), f_q))mstore(0x6ae0, mulmod(mload(0x6880), mload(0x4d80), f_q))mstore(0x6b00, mulmod(mload(0x6920), mload(0x4d80), f_q))mstore(0x6b20, mulmod(mload(0x69c0), mload(0x4d80), f_q))mstore(0x6b40, mulmod(mload(0x6a60), mload(0x4d80), f_q))mstore(0x6b60, addmod(mload(0x6760), mload(0x6aa0), f_q))mstore(0x6b80, mulmod(1, mload(0x4820), f_q)){            let result := mulmod(mload(0x1240), mload(0x4420), f_q)result := addmod(mulmod(mload(0x1260), mload(0x4440), f_q), result, f_q)mstore(0x6ba0, result)        }mstore(0x6bc0, mulmod(mload(0x6ba0), mload(0x4a40), f_q))mstore(0x6be0, mulmod(sub(f_q, mload(0x6bc0)), 1, f_q))mstore(0x6c00, mulmod(mload(0x6b80), 1, f_q)){            let result := mulmod(mload(0x1280), mload(0x4420), f_q)result := addmod(mulmod(mload(0x12a0), mload(0x4440), f_q), result, f_q)mstore(0x6c20, result)        }mstore(0x6c40, mulmod(mload(0x6c20), mload(0x4a40), f_q))mstore(0x6c60, mulmod(sub(f_q, mload(0x6c40)), mload(0x1340), f_q))mstore(0x6c80, mulmod(mload(0x6b80), mload(0x1340), f_q))mstore(0x6ca0, addmod(mload(0x6be0), mload(0x6c60), f_q))mstore(0x6cc0, mulmod(mload(0x6ca0), mload(0x4da0), f_q))mstore(0x6ce0, mulmod(mload(0x6c00), mload(0x4da0), f_q))mstore(0x6d00, mulmod(mload(0x6c80), mload(0x4da0), f_q))mstore(0x6d20, addmod(mload(0x6b60), mload(0x6cc0), f_q))mstore(0x6d40, mulmod(1, mload(0x4860), f_q)){            let result := mulmod(mload(0x12c0), mload(0x4460), f_q)result := addmod(mulmod(mload(0x12e0), mload(0x4480), f_q), result, f_q)mstore(0x6d60, result)        }mstore(0x6d80, mulmod(mload(0x6d60), mload(0x4a60), f_q))mstore(0x6da0, mulmod(sub(f_q, mload(0x6d80)), 1, f_q))mstore(0x6dc0, mulmod(mload(0x6d40), 1, f_q))mstore(0x6de0, mulmod(mload(0x6da0), mload(0x4dc0), f_q))mstore(0x6e00, mulmod(mload(0x6dc0), mload(0x4dc0), f_q))mstore(0x6e20, addmod(mload(0x6d20), mload(0x6de0), f_q))mstore(0x6e40, mulmod(1, mload(0x4360), f_q))mstore(0x6e60, mulmod(1, mload(0x1440), f_q))mstore(0x6e80, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x6ea0, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x6ec0, mload(0x6e20))success := and(eq(staticcall(gas(), 0x7, 0x6e80, 0x60, 0x6e80, 0x40), 1), success)mstore(0x6ee0, mload(0x6e80))                    mstore(0x6f00, mload(0x6ea0))mstore(0x6f20, mload(0x220))                    mstore(0x6f40, mload(0x240))success := and(eq(staticcall(gas(), 0x6, 0x6ee0, 0x80, 0x6ee0, 0x40), 1), success)mstore(0x6f60, mload(0x260))                    mstore(0x6f80, mload(0x280))mstore(0x6fa0, mload(0x52e0))success := and(eq(staticcall(gas(), 0x7, 0x6f60, 0x60, 0x6f60, 0x40), 1), success)mstore(0x6fc0, mload(0x6ee0))                    mstore(0x6fe0, mload(0x6f00))mstore(0x7000, mload(0x6f60))                    mstore(0x7020, mload(0x6f80))success := and(eq(staticcall(gas(), 0x6, 0x6fc0, 0x80, 0x6fc0, 0x40), 1), success)mstore(0x7040, mload(0x2a0))                    mstore(0x7060, mload(0x2c0))mstore(0x7080, mload(0x5300))success := and(eq(staticcall(gas(), 0x7, 0x7040, 0x60, 0x7040, 0x40), 1), success)mstore(0x70a0, mload(0x6fc0))                    mstore(0x70c0, mload(0x6fe0))mstore(0x70e0, mload(0x7040))                    mstore(0x7100, mload(0x7060))success := and(eq(staticcall(gas(), 0x6, 0x70a0, 0x80, 0x70a0, 0x40), 1), success)mstore(0x7120, mload(0x2e0))                    mstore(0x7140, mload(0x300))mstore(0x7160, mload(0x5320))success := and(eq(staticcall(gas(), 0x7, 0x7120, 0x60, 0x7120, 0x40), 1), success)mstore(0x7180, mload(0x70a0))                    mstore(0x71a0, mload(0x70c0))mstore(0x71c0, mload(0x7120))                    mstore(0x71e0, mload(0x7140))success := and(eq(staticcall(gas(), 0x6, 0x7180, 0x80, 0x7180, 0x40), 1), success)mstore(0x7200, mload(0x320))                    mstore(0x7220, mload(0x340))mstore(0x7240, mload(0x5340))success := and(eq(staticcall(gas(), 0x7, 0x7200, 0x60, 0x7200, 0x40), 1), success)mstore(0x7260, mload(0x7180))                    mstore(0x7280, mload(0x71a0))mstore(0x72a0, mload(0x7200))                    mstore(0x72c0, mload(0x7220))success := and(eq(staticcall(gas(), 0x6, 0x7260, 0x80, 0x7260, 0x40), 1), success)mstore(0x72e0, mload(0x360))                    mstore(0x7300, mload(0x380))mstore(0x7320, mload(0x5360))success := and(eq(staticcall(gas(), 0x7, 0x72e0, 0x60, 0x72e0, 0x40), 1), success)mstore(0x7340, mload(0x7260))                    mstore(0x7360, mload(0x7280))mstore(0x7380, mload(0x72e0))                    mstore(0x73a0, mload(0x7300))success := and(eq(staticcall(gas(), 0x6, 0x7340, 0x80, 0x7340, 0x40), 1), success)mstore(0x73c0, mload(0x3a0))                    mstore(0x73e0, mload(0x3c0))mstore(0x7400, mload(0x5380))success := and(eq(staticcall(gas(), 0x7, 0x73c0, 0x60, 0x73c0, 0x40), 1), success)mstore(0x7420, mload(0x7340))                    mstore(0x7440, mload(0x7360))mstore(0x7460, mload(0x73c0))                    mstore(0x7480, mload(0x73e0))success := and(eq(staticcall(gas(), 0x6, 0x7420, 0x80, 0x7420, 0x40), 1), success)mstore(0x74a0, mload(0x3e0))                    mstore(0x74c0, mload(0x400))mstore(0x74e0, mload(0x53a0))success := and(eq(staticcall(gas(), 0x7, 0x74a0, 0x60, 0x74a0, 0x40), 1), success)mstore(0x7500, mload(0x7420))                    mstore(0x7520, mload(0x7440))mstore(0x7540, mload(0x74a0))                    mstore(0x7560, mload(0x74c0))success := and(eq(staticcall(gas(), 0x6, 0x7500, 0x80, 0x7500, 0x40), 1), success)mstore(0x7580, mload(0x420))                    mstore(0x75a0, mload(0x440))mstore(0x75c0, mload(0x6400))success := and(eq(staticcall(gas(), 0x7, 0x7580, 0x60, 0x7580, 0x40), 1), success)mstore(0x75e0, mload(0x7500))                    mstore(0x7600, mload(0x7520))mstore(0x7620, mload(0x7580))                    mstore(0x7640, mload(0x75a0))success := and(eq(staticcall(gas(), 0x6, 0x75e0, 0x80, 0x75e0, 0x40), 1), success)mstore(0x7660, mload(0x500))                    mstore(0x7680, mload(0x520))mstore(0x76a0, mload(0x6420))success := and(eq(staticcall(gas(), 0x7, 0x7660, 0x60, 0x7660, 0x40), 1), success)mstore(0x76c0, mload(0x75e0))                    mstore(0x76e0, mload(0x7600))mstore(0x7700, mload(0x7660))                    mstore(0x7720, mload(0x7680))success := and(eq(staticcall(gas(), 0x6, 0x76c0, 0x80, 0x76c0, 0x40), 1), success)mstore(0x7740, 0x16110139ffcaea288b5db7a90e2cc994d5dc1ab57d81cc3098eea01dd4dfee12)                    mstore(0x7760, 0x235058a877d843d2cdda0529dcfb95e8a5b2a2234aea4570ff5d073b489242fe)mstore(0x7780, mload(0x6440))success := and(eq(staticcall(gas(), 0x7, 0x7740, 0x60, 0x7740, 0x40), 1), success)mstore(0x77a0, mload(0x76c0))                    mstore(0x77c0, mload(0x76e0))mstore(0x77e0, mload(0x7740))                    mstore(0x7800, mload(0x7760))success := and(eq(staticcall(gas(), 0x6, 0x77a0, 0x80, 0x77a0, 0x40), 1), success)mstore(0x7820, 0x04528ec7365a2881b7d3c8925570e06bb3b17f04f6a95384ac8ed19a30c12097)                    mstore(0x7840, 0x28d1ef470a8a5278ad6d2eb9047ad7e93024113f543b06870f1bbea7177db404)mstore(0x7860, mload(0x6460))success := and(eq(staticcall(gas(), 0x7, 0x7820, 0x60, 0x7820, 0x40), 1), success)mstore(0x7880, mload(0x77a0))                    mstore(0x78a0, mload(0x77c0))mstore(0x78c0, mload(0x7820))                    mstore(0x78e0, mload(0x7840))success := and(eq(staticcall(gas(), 0x6, 0x7880, 0x80, 0x7880, 0x40), 1), success)mstore(0x7900, 0x2001fc91db9d47c157d22119ec3729c8bbf6dbff6f33a10471af41fe42f711e3)                    mstore(0x7920, 0x07d5a5bd6db475ff9f39b4563f19be62de5d9f7bbcce0f91389d0d75fc1a8585)mstore(0x7940, mload(0x6480))success := and(eq(staticcall(gas(), 0x7, 0x7900, 0x60, 0x7900, 0x40), 1), success)mstore(0x7960, mload(0x7880))                    mstore(0x7980, mload(0x78a0))mstore(0x79a0, mload(0x7900))                    mstore(0x79c0, mload(0x7920))success := and(eq(staticcall(gas(), 0x6, 0x7960, 0x80, 0x7960, 0x40), 1), success)mstore(0x79e0, 0x2075fd9cc848f563b37b2a7b11de080457d63e30263eda9b7a2548ecf4e6a5ac)                    mstore(0x7a00, 0x0992caec711622820814da7d80bcea3564ab07b7f671580483321fc282821b44)mstore(0x7a20, mload(0x64a0))success := and(eq(staticcall(gas(), 0x7, 0x79e0, 0x60, 0x79e0, 0x40), 1), success)mstore(0x7a40, mload(0x7960))                    mstore(0x7a60, mload(0x7980))mstore(0x7a80, mload(0x79e0))                    mstore(0x7aa0, mload(0x7a00))success := and(eq(staticcall(gas(), 0x6, 0x7a40, 0x80, 0x7a40, 0x40), 1), success)mstore(0x7ac0, 0x2959303e8d203fc1143f281f3a8a906e538376d279f2a8310c2dfa1b6eb03fb9)                    mstore(0x7ae0, 0x0d403fb9b9e9742f4a83953e2def8a6dd517f75ea60df6c1356dcf5a444026fa)mstore(0x7b00, mload(0x64c0))success := and(eq(staticcall(gas(), 0x7, 0x7ac0, 0x60, 0x7ac0, 0x40), 1), success)mstore(0x7b20, mload(0x7a40))                    mstore(0x7b40, mload(0x7a60))mstore(0x7b60, mload(0x7ac0))                    mstore(0x7b80, mload(0x7ae0))success := and(eq(staticcall(gas(), 0x6, 0x7b20, 0x80, 0x7b20, 0x40), 1), success)mstore(0x7ba0, 0x1af3f6fbed8b7b92f3657bbf56c79df1cea9be38d29ea9c7f6f7d193cd762ddd)                    mstore(0x7bc0, 0x29236751fd1d0dbe22c57f17dd319c8504178bb39baae088c062a6ce8b41a857)mstore(0x7be0, mload(0x64e0))success := and(eq(staticcall(gas(), 0x7, 0x7ba0, 0x60, 0x7ba0, 0x40), 1), success)mstore(0x7c00, mload(0x7b20))                    mstore(0x7c20, mload(0x7b40))mstore(0x7c40, mload(0x7ba0))                    mstore(0x7c60, mload(0x7bc0))success := and(eq(staticcall(gas(), 0x6, 0x7c00, 0x80, 0x7c00, 0x40), 1), success)mstore(0x7c80, 0x110253e33c343eceafc3d5f21ce20a5bad68de222b71563f3f0db3c2175b3cb2)                    mstore(0x7ca0, 0x1f354151121eb2b64e8f49abdf0c770773ef963aaf080b59b553022c05c12676)mstore(0x7cc0, mload(0x6500))success := and(eq(staticcall(gas(), 0x7, 0x7c80, 0x60, 0x7c80, 0x40), 1), success)mstore(0x7ce0, mload(0x7c00))                    mstore(0x7d00, mload(0x7c20))mstore(0x7d20, mload(0x7c80))                    mstore(0x7d40, mload(0x7ca0))success := and(eq(staticcall(gas(), 0x6, 0x7ce0, 0x80, 0x7ce0, 0x40), 1), success)mstore(0x7d60, 0x1441f29c4c2a4187b399976220d1732c676ab94a11e1d267066ac55e90d7824e)                    mstore(0x7d80, 0x1caf30d355cad4ef07ce07485d368c66735c508ca86cec117ebec24a4744817f)mstore(0x7da0, mload(0x6520))success := and(eq(staticcall(gas(), 0x7, 0x7d60, 0x60, 0x7d60, 0x40), 1), success)mstore(0x7dc0, mload(0x7ce0))                    mstore(0x7de0, mload(0x7d00))mstore(0x7e00, mload(0x7d60))                    mstore(0x7e20, mload(0x7d80))success := and(eq(staticcall(gas(), 0x6, 0x7dc0, 0x80, 0x7dc0, 0x40), 1), success)mstore(0x7e40, 0x0788e757e87d0a0dc0b4a8cc5611babc6635ad1028446112e5ba6d88244b3f88)                    mstore(0x7e60, 0x164ca47318fff945222117d8f2407c8bdd81c7d6d737858d7491dc85e5b36fea)mstore(0x7e80, mload(0x6540))success := and(eq(staticcall(gas(), 0x7, 0x7e40, 0x60, 0x7e40, 0x40), 1), success)mstore(0x7ea0, mload(0x7dc0))                    mstore(0x7ec0, mload(0x7de0))mstore(0x7ee0, mload(0x7e40))                    mstore(0x7f00, mload(0x7e60))success := and(eq(staticcall(gas(), 0x6, 0x7ea0, 0x80, 0x7ea0, 0x40), 1), success)mstore(0x7f20, 0x00c82f9056e6455b536b47ea783577cb4fa99a7488fe4d7f4712ee0344f18a80)                    mstore(0x7f40, 0x01f2889dcdc16b45f1056ac1af7167ae89a90f085cd725adcd408b6cc81bad87)mstore(0x7f60, mload(0x6560))success := and(eq(staticcall(gas(), 0x7, 0x7f20, 0x60, 0x7f20, 0x40), 1), success)mstore(0x7f80, mload(0x7ea0))                    mstore(0x7fa0, mload(0x7ec0))mstore(0x7fc0, mload(0x7f20))                    mstore(0x7fe0, mload(0x7f40))success := and(eq(staticcall(gas(), 0x6, 0x7f80, 0x80, 0x7f80, 0x40), 1), success)mstore(0x8000, 0x2ae781f09896e27b91a8cf5d00f0277237db0d8abf54c0afc6c440b3bb9f5ddf)                    mstore(0x8020, 0x14e6fb10c7630dc2d94bcd5f1635828bcaf1499f32cbf9f4b0d290113ca41333)mstore(0x8040, mload(0x6580))success := and(eq(staticcall(gas(), 0x7, 0x8000, 0x60, 0x8000, 0x40), 1), success)mstore(0x8060, mload(0x7f80))                    mstore(0x8080, mload(0x7fa0))mstore(0x80a0, mload(0x8000))                    mstore(0x80c0, mload(0x8020))success := and(eq(staticcall(gas(), 0x6, 0x8060, 0x80, 0x8060, 0x40), 1), success)mstore(0x80e0, 0x2e861ae220c06d7cea845b0609d44f3cd517abf16c6b76b54c29448c36d7bd7e)                    mstore(0x8100, 0x16e526e70e13e64f8c99c27b1396bf7ac5bae927d651468cbc393208c8715541)mstore(0x8120, mload(0x65a0))success := and(eq(staticcall(gas(), 0x7, 0x80e0, 0x60, 0x80e0, 0x40), 1), success)mstore(0x8140, mload(0x8060))                    mstore(0x8160, mload(0x8080))mstore(0x8180, mload(0x80e0))                    mstore(0x81a0, mload(0x8100))success := and(eq(staticcall(gas(), 0x6, 0x8140, 0x80, 0x8140, 0x40), 1), success)mstore(0x81c0, 0x0e9d9acc5419b14b666104bbde462e9933e17fe8e1aa95396358b3d05fb14d35)                    mstore(0x81e0, 0x19e87bf55ffacfaec23d42bc449b562476074828823882479d09f025b86b32a5)mstore(0x8200, mload(0x65c0))success := and(eq(staticcall(gas(), 0x7, 0x81c0, 0x60, 0x81c0, 0x40), 1), success)mstore(0x8220, mload(0x8140))                    mstore(0x8240, mload(0x8160))mstore(0x8260, mload(0x81c0))                    mstore(0x8280, mload(0x81e0))success := and(eq(staticcall(gas(), 0x6, 0x8220, 0x80, 0x8220, 0x40), 1), success)mstore(0x82a0, 0x26a5b8ef3f0d4e9b646134f4ffa79bae9607281ef2124fa455239a38fdd5134b)                    mstore(0x82c0, 0x0457a193201120b19db3b9dc122f79eba84f6e350dae80415bd720ca38789d04)mstore(0x82e0, mload(0x65e0))success := and(eq(staticcall(gas(), 0x7, 0x82a0, 0x60, 0x82a0, 0x40), 1), success)mstore(0x8300, mload(0x8220))                    mstore(0x8320, mload(0x8240))mstore(0x8340, mload(0x82a0))                    mstore(0x8360, mload(0x82c0))success := and(eq(staticcall(gas(), 0x6, 0x8300, 0x80, 0x8300, 0x40), 1), success)mstore(0x8380, 0x1e0330919a18cd04edf9d6c2f037e441567ca02e25f5fb13bbb6b4662f5facd7)                    mstore(0x83a0, 0x0b80b10b2364f73bf2fecff09a514461efa731aefae825f4a70ddb82da2996d2)mstore(0x83c0, mload(0x6600))success := and(eq(staticcall(gas(), 0x7, 0x8380, 0x60, 0x8380, 0x40), 1), success)mstore(0x83e0, mload(0x8300))                    mstore(0x8400, mload(0x8320))mstore(0x8420, mload(0x8380))                    mstore(0x8440, mload(0x83a0))success := and(eq(staticcall(gas(), 0x6, 0x83e0, 0x80, 0x83e0, 0x40), 1), success)mstore(0x8460, 0x29fea04b22e965cb7bb2b876ec3db91e192f09358b6cef07ef91f589c6f9ea93)                    mstore(0x8480, 0x26bedc0f0c6476d05c29607416f7197cca9df4468aba0c868bab000852eb41f9)mstore(0x84a0, mload(0x6620))success := and(eq(staticcall(gas(), 0x7, 0x8460, 0x60, 0x8460, 0x40), 1), success)mstore(0x84c0, mload(0x83e0))                    mstore(0x84e0, mload(0x8400))mstore(0x8500, mload(0x8460))                    mstore(0x8520, mload(0x8480))success := and(eq(staticcall(gas(), 0x6, 0x84c0, 0x80, 0x84c0, 0x40), 1), success)mstore(0x8540, 0x226c31dee63ec129f6a529ae7a056a9d0e49851f6adeea30d8ab9b2966fe69e3)                    mstore(0x8560, 0x1de138eac035d518bf490f363a1049aa54b1dbd07f231a7394f22a952c6945f4)mstore(0x8580, mload(0x6640))success := and(eq(staticcall(gas(), 0x7, 0x8540, 0x60, 0x8540, 0x40), 1), success)mstore(0x85a0, mload(0x84c0))                    mstore(0x85c0, mload(0x84e0))mstore(0x85e0, mload(0x8540))                    mstore(0x8600, mload(0x8560))success := and(eq(staticcall(gas(), 0x6, 0x85a0, 0x80, 0x85a0, 0x40), 1), success)mstore(0x8620, 0x0a01e44f207ada75eb6a531221f3ffc199ff903717acf2377e9f8e9fee7d46fc)                    mstore(0x8640, 0x13f3eda1f30b397a771d88e95d451dac6f2d900728672efa3998f834fb5019cf)mstore(0x8660, mload(0x6660))success := and(eq(staticcall(gas(), 0x7, 0x8620, 0x60, 0x8620, 0x40), 1), success)mstore(0x8680, mload(0x85a0))                    mstore(0x86a0, mload(0x85c0))mstore(0x86c0, mload(0x8620))                    mstore(0x86e0, mload(0x8640))success := and(eq(staticcall(gas(), 0x6, 0x8680, 0x80, 0x8680, 0x40), 1), success)mstore(0x8700, 0x183e0dcbfd90a179df050a7ff96fe9b21d90fc10307a0adf6ed8b5f11b94bfc5)                    mstore(0x8720, 0x1b99e60d00e75cf0ea81dbe6e9e74033b8f7cdbb33cee2ec717c31ae58442780)mstore(0x8740, mload(0x6680))success := and(eq(staticcall(gas(), 0x7, 0x8700, 0x60, 0x8700, 0x40), 1), success)mstore(0x8760, mload(0x8680))                    mstore(0x8780, mload(0x86a0))mstore(0x87a0, mload(0x8700))                    mstore(0x87c0, mload(0x8720))success := and(eq(staticcall(gas(), 0x6, 0x8760, 0x80, 0x8760, 0x40), 1), success)mstore(0x87e0, 0x2d48236e8a5794db527f9a5374839ce64b64e7229d183cda77fe66bd943f65e5)                    mstore(0x8800, 0x06f472369dc3c4ecae95586baca179cb3fe28e65675d71a3e6275520d9c7d747)mstore(0x8820, mload(0x66a0))success := and(eq(staticcall(gas(), 0x7, 0x87e0, 0x60, 0x87e0, 0x40), 1), success)mstore(0x8840, mload(0x8760))                    mstore(0x8860, mload(0x8780))mstore(0x8880, mload(0x87e0))                    mstore(0x88a0, mload(0x8800))success := and(eq(staticcall(gas(), 0x6, 0x8840, 0x80, 0x8840, 0x40), 1), success)mstore(0x88c0, 0x2b7ae2ec7837194e9ad18e9a65374be5fb7818bf0d352a6d069cbcfa6dc48750)                    mstore(0x88e0, 0x22b664ba612400d5cce32e88e9c00c790a83f2fec90eaa38cf7ddb678ddcdea6)mstore(0x8900, mload(0x66c0))success := and(eq(staticcall(gas(), 0x7, 0x88c0, 0x60, 0x88c0, 0x40), 1), success)mstore(0x8920, mload(0x8840))                    mstore(0x8940, mload(0x8860))mstore(0x8960, mload(0x88c0))                    mstore(0x8980, mload(0x88e0))success := and(eq(staticcall(gas(), 0x6, 0x8920, 0x80, 0x8920, 0x40), 1), success)mstore(0x89a0, mload(0x860))                    mstore(0x89c0, mload(0x880))mstore(0x89e0, mload(0x66e0))success := and(eq(staticcall(gas(), 0x7, 0x89a0, 0x60, 0x89a0, 0x40), 1), success)mstore(0x8a00, mload(0x8920))                    mstore(0x8a20, mload(0x8940))mstore(0x8a40, mload(0x89a0))                    mstore(0x8a60, mload(0x89c0))success := and(eq(staticcall(gas(), 0x6, 0x8a00, 0x80, 0x8a00, 0x40), 1), success)mstore(0x8a80, mload(0x8a0))                    mstore(0x8aa0, mload(0x8c0))mstore(0x8ac0, mload(0x6700))success := and(eq(staticcall(gas(), 0x7, 0x8a80, 0x60, 0x8a80, 0x40), 1), success)mstore(0x8ae0, mload(0x8a00))                    mstore(0x8b00, mload(0x8a20))mstore(0x8b20, mload(0x8a80))                    mstore(0x8b40, mload(0x8aa0))success := and(eq(staticcall(gas(), 0x6, 0x8ae0, 0x80, 0x8ae0, 0x40), 1), success)mstore(0x8b60, mload(0x8e0))                    mstore(0x8b80, mload(0x900))mstore(0x8ba0, mload(0x6720))success := and(eq(staticcall(gas(), 0x7, 0x8b60, 0x60, 0x8b60, 0x40), 1), success)mstore(0x8bc0, mload(0x8ae0))                    mstore(0x8be0, mload(0x8b00))mstore(0x8c00, mload(0x8b60))                    mstore(0x8c20, mload(0x8b80))success := and(eq(staticcall(gas(), 0x6, 0x8bc0, 0x80, 0x8bc0, 0x40), 1), success)mstore(0x8c40, mload(0x7c0))                    mstore(0x8c60, mload(0x7e0))mstore(0x8c80, mload(0x6740))success := and(eq(staticcall(gas(), 0x7, 0x8c40, 0x60, 0x8c40, 0x40), 1), success)mstore(0x8ca0, mload(0x8bc0))                    mstore(0x8cc0, mload(0x8be0))mstore(0x8ce0, mload(0x8c40))                    mstore(0x8d00, mload(0x8c60))success := and(eq(staticcall(gas(), 0x6, 0x8ca0, 0x80, 0x8ca0, 0x40), 1), success)mstore(0x8d20, mload(0x600))                    mstore(0x8d40, mload(0x620))mstore(0x8d60, mload(0x6ac0))success := and(eq(staticcall(gas(), 0x7, 0x8d20, 0x60, 0x8d20, 0x40), 1), success)mstore(0x8d80, mload(0x8ca0))                    mstore(0x8da0, mload(0x8cc0))mstore(0x8dc0, mload(0x8d20))                    mstore(0x8de0, mload(0x8d40))success := and(eq(staticcall(gas(), 0x6, 0x8d80, 0x80, 0x8d80, 0x40), 1), success)mstore(0x8e00, mload(0x640))                    mstore(0x8e20, mload(0x660))mstore(0x8e40, mload(0x6ae0))success := and(eq(staticcall(gas(), 0x7, 0x8e00, 0x60, 0x8e00, 0x40), 1), success)mstore(0x8e60, mload(0x8d80))                    mstore(0x8e80, mload(0x8da0))mstore(0x8ea0, mload(0x8e00))                    mstore(0x8ec0, mload(0x8e20))success := and(eq(staticcall(gas(), 0x6, 0x8e60, 0x80, 0x8e60, 0x40), 1), success)mstore(0x8ee0, mload(0x680))                    mstore(0x8f00, mload(0x6a0))mstore(0x8f20, mload(0x6b00))success := and(eq(staticcall(gas(), 0x7, 0x8ee0, 0x60, 0x8ee0, 0x40), 1), success)mstore(0x8f40, mload(0x8e60))                    mstore(0x8f60, mload(0x8e80))mstore(0x8f80, mload(0x8ee0))                    mstore(0x8fa0, mload(0x8f00))success := and(eq(staticcall(gas(), 0x6, 0x8f40, 0x80, 0x8f40, 0x40), 1), success)mstore(0x8fc0, mload(0x6c0))                    mstore(0x8fe0, mload(0x6e0))mstore(0x9000, mload(0x6b20))success := and(eq(staticcall(gas(), 0x7, 0x8fc0, 0x60, 0x8fc0, 0x40), 1), success)mstore(0x9020, mload(0x8f40))                    mstore(0x9040, mload(0x8f60))mstore(0x9060, mload(0x8fc0))                    mstore(0x9080, mload(0x8fe0))success := and(eq(staticcall(gas(), 0x6, 0x9020, 0x80, 0x9020, 0x40), 1), success)mstore(0x90a0, mload(0x700))                    mstore(0x90c0, mload(0x720))mstore(0x90e0, mload(0x6b40))success := and(eq(staticcall(gas(), 0x7, 0x90a0, 0x60, 0x90a0, 0x40), 1), success)mstore(0x9100, mload(0x9020))                    mstore(0x9120, mload(0x9040))mstore(0x9140, mload(0x90a0))                    mstore(0x9160, mload(0x90c0))success := and(eq(staticcall(gas(), 0x6, 0x9100, 0x80, 0x9100, 0x40), 1), success)mstore(0x9180, mload(0x740))                    mstore(0x91a0, mload(0x760))mstore(0x91c0, mload(0x6ce0))success := and(eq(staticcall(gas(), 0x7, 0x9180, 0x60, 0x9180, 0x40), 1), success)mstore(0x91e0, mload(0x9100))                    mstore(0x9200, mload(0x9120))mstore(0x9220, mload(0x9180))                    mstore(0x9240, mload(0x91a0))success := and(eq(staticcall(gas(), 0x6, 0x91e0, 0x80, 0x91e0, 0x40), 1), success)mstore(0x9260, mload(0x780))                    mstore(0x9280, mload(0x7a0))mstore(0x92a0, mload(0x6d00))success := and(eq(staticcall(gas(), 0x7, 0x9260, 0x60, 0x9260, 0x40), 1), success)mstore(0x92c0, mload(0x91e0))                    mstore(0x92e0, mload(0x9200))mstore(0x9300, mload(0x9260))                    mstore(0x9320, mload(0x9280))success := and(eq(staticcall(gas(), 0x6, 0x92c0, 0x80, 0x92c0, 0x40), 1), success)mstore(0x9340, mload(0x4c0))                    mstore(0x9360, mload(0x4e0))mstore(0x9380, mload(0x6e00))success := and(eq(staticcall(gas(), 0x7, 0x9340, 0x60, 0x9340, 0x40), 1), success)mstore(0x93a0, mload(0x92c0))                    mstore(0x93c0, mload(0x92e0))mstore(0x93e0, mload(0x9340))                    mstore(0x9400, mload(0x9360))success := and(eq(staticcall(gas(), 0x6, 0x93a0, 0x80, 0x93a0, 0x40), 1), success)mstore(0x9420, mload(0x13e0))                    mstore(0x9440, mload(0x1400))mstore(0x9460, sub(f_q, mload(0x6e40)))success := and(eq(staticcall(gas(), 0x7, 0x9420, 0x60, 0x9420, 0x40), 1), success)mstore(0x9480, mload(0x93a0))                    mstore(0x94a0, mload(0x93c0))mstore(0x94c0, mload(0x9420))                    mstore(0x94e0, mload(0x9440))success := and(eq(staticcall(gas(), 0x6, 0x9480, 0x80, 0x9480, 0x40), 1), success)mstore(0x9500, mload(0x1480))                    mstore(0x9520, mload(0x14a0))mstore(0x9540, mload(0x6e60))success := and(eq(staticcall(gas(), 0x7, 0x9500, 0x60, 0x9500, 0x40), 1), success)mstore(0x9560, mload(0x9480))                    mstore(0x9580, mload(0x94a0))mstore(0x95a0, mload(0x9500))                    mstore(0x95c0, mload(0x9520))success := and(eq(staticcall(gas(), 0x6, 0x9560, 0x80, 0x9560, 0x40), 1), success)mstore(0x95e0, mload(0x9560))                    mstore(0x9600, mload(0x9580))mstore(0x9620, mload(0x1480))                    mstore(0x9640, mload(0x14a0))mstore(0x9660, mload(0x14c0))                    mstore(0x9680, mload(0x14e0))mstore(0x96a0, mload(0x1500))                    mstore(0x96c0, mload(0x1520))mstore(0x96e0, keccak256(0x95e0, 256))mstore(0x9700, mod(mload(38496), f_q))mstore(0x9720, mulmod(mload(0x9700), mload(0x9700), f_q))mstore(0x9740, mulmod(1, mload(0x9700), f_q))mstore(0x9760, mload(0x9660))                    mstore(0x9780, mload(0x9680))mstore(0x97a0, mload(0x9740))success := and(eq(staticcall(gas(), 0x7, 0x9760, 0x60, 0x9760, 0x40), 1), success)mstore(0x97c0, mload(0x95e0))                    mstore(0x97e0, mload(0x9600))mstore(0x9800, mload(0x9760))                    mstore(0x9820, mload(0x9780))success := and(eq(staticcall(gas(), 0x6, 0x97c0, 0x80, 0x97c0, 0x40), 1), success)mstore(0x9840, mload(0x96a0))                    mstore(0x9860, mload(0x96c0))mstore(0x9880, mload(0x9740))success := and(eq(staticcall(gas(), 0x7, 0x9840, 0x60, 0x9840, 0x40), 1), success)mstore(0x98a0, mload(0x9620))                    mstore(0x98c0, mload(0x9640))mstore(0x98e0, mload(0x9840))                    mstore(0x9900, mload(0x9860))success := and(eq(staticcall(gas(), 0x6, 0x98a0, 0x80, 0x98a0, 0x40), 1), success)mstore(0x9920, mload(0x97c0))                    mstore(0x9940, mload(0x97e0))mstore(0x9960, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x9980, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x99a0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x99c0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x99e0, mload(0x98a0))                    mstore(0x9a00, mload(0x98c0))mstore(0x9a20, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)            mstore(0x9a40, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)            mstore(0x9a60, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)            mstore(0x9a80, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)success := and(eq(staticcall(gas(), 0x8, 0x9920, 0x180, 0x9920, 0x20), 1), success)success := and(eq(mload(0x9920), 1), success)} return success; } }
